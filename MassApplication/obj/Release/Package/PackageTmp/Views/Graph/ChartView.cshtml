@using MassApplication.Models.Graph;
@model ChartParameters
@using System.Data;

@{
    ViewBag.Title = "Chart View";
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    var a = 10;
}

<head>
    <style>
        .tab {
            display: none;
        }

        .current {
            display: block;
        }

        .step {
            height: 30px;
            width: 30px;
            cursor: pointer;
            margin: 0 2px;
            color: #fff;
            background-color: #bbbbbb;
            border: none;
            border-radius: 50%;
            display: inline-block;
            opacity: 0.8;
            padding: 5px
        }

            .step.active {
                opacity: 1;
                background-color: #69c769;
            }

            .step.finish {
                background-color: #4CAF50;
            }

        .panel-right {
            padding: 10px;
        }
    </style>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="~/GraphStyles/css/styles.css?v=1">

    <script src="~/Scripts/docs.js"></script>
    <script src="~/Scripts/prettify.js"></script>
    <script src="~/GraphStyles/js/spectrum.js"></script>
    <script src="~/Scripts/toc.js"></script>
    <link rel="stylesheet" href="~/LoginStyles/css/font-awesome.min.css" />
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/themes/smoothness/jquery-ui.css" />

    <link href="~/GraphStyles/css/spectrum.css" rel="stylesheet" />

    <script type="text/javascript">
        $(document).ready(function () {
            //var colorarray = '@ViewBag.DefineColor';
            //console.log("colorarray:", colorarray);
            $(".databtn").on('click', function () {
                var query_id = $(this).attr('data-id');
                $.ajax({
                    type: "POST",
                    url: '../Graph/getdataby_id',
                    datatype: "html",
                    data: { getQuery_id: query_id },
                    success: function (data) {
                        if (data) {
                            $('#data_container').show();
                            $('#data_container').empty()
                            $("div").find("#data_container").append(data);
                        }
                    }
                });
            });
        });
    </script>
    <style>
        .drag-style {
            border: 1px solid #ddd;
            background: #ddd;
            text-align: center;
            padding-right: 15px;
            padding-left: 15px;
            border-radius: 4px;
            z-index: -1;
            /*height:84px;*/
        }

        .drag-style1 {
            border: 1px solid #ddd;
            background: #ddd;
            text-align: center;
            padding-right: 15px;
            padding-left: 15px;
            border-radius: 4px;
            z-index: -1;
            /*height: 96px;*/
        }

        .drag-style2 {
            border: 1px solid #ddd;
            background: #ddd;
            text-align: center;
            padding-right: 15px;
            padding-left: 15px;
            border-radius: 4px;
            z-index: -1;
            /* height: 96px;*/
        }

        #myTabInner a.card1:hover img {
            filter: brightness(0) invert(1);
        }

        #myTabInner a.card1:active img {
            filter: brightness(0) invert(1);
        }

        #myTabC .nav-tabs .nav-link.active img {
            filter: brightness(0) invert(1);
        }
    </style>
    <style>
        .table tr td input {
            display: block;
        }

        .picker {
            border-radius: 5px;
            width: 25px;
            height: 20px;
            cursor: pointer;
            -webkit-transition: all linear .2s;
            -moz-transition: all linear .2s;
            /* -ms-transition: all linear .2s;*/
            -o-transition: all linear .2s;
            transition: all linear .2s;
            border: thin solid #eee;
        }

            .picker:hover {
                transform: scale(1.1);
            }

        .sp-preview {
            border: none;
        }

        .sp-replacer {
            width: 50px;
            background: none;
            /* background: #f4f6f9;*/
            /* background: white;*/
            border: none;
        }

        .sp-preview, .sp-alpha, .sp-thumb-el {
            width: 60%;
        }
    </style>

</head>
<body style="overflow:auto">

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="page-container" style="width:100%;">
                    @*<label>Horizontal Splitter Panes:</label>*@
                    <div class="panel-container">
                        <div class="panel-left card mt-2">
                            @if (Convert.ToString(@Session["edit_select"]) != "")
                            {
                                <ul class="nav nav-tabs" id="myTab" role="tablist" style="position:relative">
                                    <li class="nav-item">
                                        <a class="nav-link " id="home-tab" data-nav="0" href="javascript:void(0)">Chart</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="profile-tab" data-nav="1" href="javascript:void(0)">Data</a>
                                    </li>
                                    <li class="nav-item" onclick="show_functions();">
                                        <a class="nav-link active" id="contact-tab" data-nav="2" href="javascript:void(0)">Mapping</a>
                                    </li>
                                </ul>
                            }
                            else
                            {
                                <ul class="nav nav-tabs" id="myTab" role="tablist" style="position:relative">
                                    <li class="nav-item">
                                        <a class="nav-link active" id="home-tab" data-nav="0" href="javascript:void(0)">Chart</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="profile-tab" data-nav="1" href="javascript:void(0)">Data</a>
                                    </li>
                                    <li class="nav-item" onclick="show_functions();">
                                        <a class="nav-link" id="contact-tab" data-nav="2" href="javascript:void(0)">Mapping</a>
                                    </li>
                                </ul>
                            }
                            <div class="container_d">
                                <div class="" id="myTabC">
                                    @if (Convert.ToString(@Session["edit_select"]) != "")
                                    {
                                        <div class="tab-pane tab" id="home">
                                            <div class="row contact-trap">
                                                <ul class="nav nav-tabs border-bottom-0" id="myTabInner" role="tablist">
                                                    @for (var i = 0; i < Model.chartlist.Count; i++)
                                                    {
                                                        <li class="nav-item">
                                                            <a onclick="imgbtn();" class="nav-link card1" id="alluvial-diagram-1" data-toggle="tab" href="#alluvial-diagram" role="tab" data-id="@Model.chartlist[i].chart_type_id" data_type="@Model.chartlist[i].charttype">
                                                                <div class="media button" data-value="@Model.chartlist[i].ChartParams" id="@Model.chartlist[i].chart_type_id" name="@Model.chartlist[i].charttype" data-id="@Model.chartlist[i].charttype" data-img="@Model.chartlist[i].image_path" data-description="@Model.chartlist[i].description">
                                                                    <img src=@Url.Content(@Model.chartlist[i].icon_path) style="width:48px" class="pr-3" />
                                                                    <div class="media-body">
                                                                        <h5>@Model.chartlist[i].charttype</h5>
                                                                        <p>Correlations, proportions </p>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <button type="button" class="next btn  btn-dash  float-right mr-3 pl-3 pr-3 mt-4 mb-3 tab-active">Next</button>
                                        </div>
                                        <div class="tab-pane tab" id="profile">
                                            <div class="row contact-trap">
                                                <ul class="nav nav-tabs border-bottom-0" id="myTabInnerData" role="tablist">
                                                    @for (var i = 0; i < Model.Listquery.Count; i++)
                                                    {
                                                        <li class="nav-item">
                                                            <a class="nav-link card1 " id="datatab-1" data-toggle="tab" href="#datatab-d0" role="tab" onclick="datahide();">
                                                                <div class="media databtn" data-id="@Model.Listquery[i].query_id" id="data_id_val">
                                                                    @*databtn*@
                                                                    <div class="media-body">
                                                                        <h5 class=" mt-2" onclick="datahide();"> @Model.Listquery[i].function_name</h5>
                                                                        <p class="pt-1">Dendrogram </p>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <button type="button" class="next btn btn-dash  float-right mr-3 pl-3 pr-3 mt-4 mb-3 tab-active1" onclick="show_functions();">Next</button>
                                        </div>
                                        <div class="tab-pane tab active" id="contact" onload="Edit_mode();">
                                            <div class="row contact-trap">
                                                @*@if (Convert.ToString(@Session["chart_type"]) != "tabular")
                                                    {
                                                        <div id="left_container" class="draggable" style="z-index:2">
                                                            @{Html.RenderAction("_partialgetdataby_id_columns", "Graph", new { getQuery_id = @a });}
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div id="left_container" style="width:-webkit-fill-available;">
                                                            @{Html.RenderAction("_partialgetdataby_tabular", "Graph", new { getQuery_id = @a });}
                                                        </div>
                                                    }*@

                                                <div id="left_container" class="draggable" style="z-index:2">
                                                    @{Html.RenderAction("_partialgetdataby_id_columns", "Graph", new { getQuery_id = @a });}
                                                </div>

                                            </div>
                                            @*<input type="button" id="loadchart" class="btn  btn-dash m-2 float-right mr-4 mt-4" value="View Chart">*@
                                        </div>

                                    }
                                    else
                                    {
                                        <div class="tab-pane tab " id="home">
                                            <div class="row contact-trap">
                                                <ul class="nav nav-tabs border-bottom-0" id="myTabInner" role="tablist">
                                                    @for (var i = 0; i < Model.chartlist.Count; i++)
                                                    {
                                                        <li class="nav-item">
                                                            <a onclick="imgbtn();" class="nav-link card1" id="alluvial-diagram-1" data-toggle="tab" href="#alluvial-diagram" role="tab" data-id="@Model.chartlist[i].chart_type_id" data_type="@Model.chartlist[i].charttype">
                                                                <div class="media button" data-value="@Model.chartlist[i].ChartParams" id="@Model.chartlist[i].chart_type_id" name="@Model.chartlist[i].charttype" data-id="@Model.chartlist[i].charttype" data-img="@Model.chartlist[i].image_path" data-description="@Model.chartlist[i].description">
                                                                    <img src=@Url.Content(@Model.chartlist[i].icon_path) style="width:48px" class="pr-3" />
                                                                    <div class="media-body">
                                                                        <h5>@Model.chartlist[i].charttype</h5>
                                                                        <p>Correlations, proportions </p>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <button type="button" class="next btn  btn-dash  float-right mr-3 pl-3 pr-3 mt-4 mb-3 tab-active">Next</button>
                                        </div>
                                        <div class="tab-pane tab" id="profile">
                                            <div class="row contact-trap">
                                                <ul class="nav nav-tabs border-bottom-0" id="myTabInnerData" role="tablist">
                                                    @for (var i = 0; i < Model.Listquery.Count; i++)
                                                    {
                                                        <li class="nav-item">
                                                            <a class="nav-link card1 " id="datatab-1" data-toggle="tab" href="#datatab-d0" role="tab" onclick="datahide();">
                                                                <div class="media databtn" data-id="@Model.Listquery[i].query_id" id="data_id_val">
                                                                    @*databtn*@
                                                                    <div class="media-body">
                                                                        <h5 class=" mt-2" onclick="datahide();"> @Model.Listquery[i].function_name</h5>
                                                                        <p class="pt-1">Dendrogram </p>
                                                                    </div>
                                                                </div>
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <button type="button" class="next btn btn-dash  float-right mr-3 pl-3 pr-3 mt-4 mb-3 tab-active1" onclick="show_functions();">Next</button>
                                        </div>
                                        <div class="tab-pane tab" id="contact" onload="show_functions();">
                                            <div class="row contact-trap">
                                                @if (Convert.ToString(@Session["chart_type"]) != "tabular")
                                                {
                                                    <div id="left_container" class="draggable" style="z-index:2">
                                                        @{Html.RenderAction("_partialgetdataby_id_columns", "Graph", new { getQuery_id = @a });}
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div id="left_container" style="width:-webkit-fill-available;">
                                                        @{Html.RenderAction("_partialgetdataby_tabular", "Graph", new { getQuery_id = @a });}
                                                    </div>
                                                }
                                            </div>
                                            @*<input type="button" id="loadchart" class="btn  btn-dash m-2 float-right mr-4 mt-4" value="View Chart">*@
                                        </div>
                                    }


                                </div>

                            </div>

                        </div>
                        <div class="splitter"> </div>
                        <div class="panel-right card mt-2" id="div2">
                            @*<div id="labelgraph_container" class="labelgraph m-t-0">

                                </div>*@
                            @if (Convert.ToString(@Session["edit_select"]) != "")
                            {
                                <div class="map_data mb-2" style="display:none;">
                                    <p class="d-flex float-right">
                                        <input type="button" id="loadchart_edit" class="btn  btn-dash mr-2" data_typ="@Session["chart_type"]" value="View Chart" style="width:100px;">
                                        <button type="button" class="btn btn-green" data-toggle="modal" data-target="#myModal" id="saviid" style="width:100px; display:none;">Save</button>

                                    </p>
                                </div>
                            }
                            else
                            {
                                <div class="map_data mb-2" style="display:none;">
                                    <p class="d-flex float-right">
                                        <input type="button" id="loadchart1" class="btn  btn-dash mr-2" value="View Chart" style="width:100px;">
                                        <button type="button" class="btn btn-green" data-toggle="modal" data-target="#myModal" id="saviid" style="width:100px; display:none;">Save</button>

                                    </p>
                                </div>
                            }


                            <div id="container" class="chartContainer"></div>

                            <div id="chartDiv" class="chartbar mt-1  p-2">
                                <canvas id="myChart" height="100px" style="display: block;"></canvas>

                                <div id="tabular_container" class="tabular pb-3"></div>

                                <div id="labelgraph_container" class="labelgraph card pb-3 pt-3">

                                </div>
                                @*<button type="button" class="btn btn-dash float-right mb-2 mr-2 mt-3" data-toggle="modal" data-target="#myModal" id="saviid">Save</button>*@
                            </div>

                            <div class="chartContainer2 mb-3 mt-2" style="margin-top:5px">
                                <form>
                                    <div class="form-row" id="container_chart"></div>
                                </form>
                            </div>

                            <div id="data_container" class="chartContainer" style="margin-top: 0px;"></div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- The Modal -->
    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Generate KPI </h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <form action="/action_page.php">
                        <div class="form-group">
                            <label for="email" class="mb-1 mt-2"> KPI Name </label>
                            <input type="text" class="form-control form-height" placeholder="KPI Name" id="kpi_name">
                        </div>
                        <div class="form-group">
                            <label for="pwd" class="mb-1 mt-2">Description</label>
                            <input type="text" class="form-control form-height" placeholder="Description" id="kpi_description">
                        </div>

                        <div class="form-group">
                            <label for="pwd" class="mb-1 mt-2">User Type</label>
                            @Html.DropDownList("kpi_user_type", new SelectList(ViewBag.UserRoleType, "Value", "Text"), new { @class = "form-control" })
                        </div>

                        @*<div class="form-check">
                            <input type="checkbox" class="form-check-input" id="dashboardCheck">
                            <label class="form-check-label mt-1" for="dashboardCheck">System KPI</label>
                        </div>*@


                    </form>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">

                    <input type="button" class="BtnSubmitKpi btn btn-green mt-2 pl-4 pr-4" value="Submit" />
                    <button type="button" class="BtnCloseKpi btn btn-dash pl-4 pr-4" data-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>

    <script src="~/Scripts/Chart-js/chart.js"></script>

    <script>
        function Edit_mode() {
            //alert("edit mode active");
            $("#profile-tab").css("pointer-events", "all");
            $(".map_data").show();

            var chart_id = @Html.Raw(Json.Encode(Model.chart_type_name_edit));
            //alert(chart_id);

            var resultJSON = @Html.Raw(Json.Encode(Model.chart_selected_params_edit));
            //console.log("resultJSON", resultJSON);

             var charttype;

             if (chart_id != "tabular") {
                 var result = $.parseJSON(resultJSON);
             }
             var container = document.getElementById("container_chart");
             while (container.hasChildNodes()) {
                    container.removeChild(container.lastChild);
             }
            //var count = 1;
              $.each(result, function (k, v) {
                   if (k == "Select") {
                       $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <select name="drop_down_label" class="indet form-control mb-3" id=' + k + '> '
                           + '<option value=Avg>Avg</option>  <option value=Sum> Sum </option> </select> </div></div>');
                   }
                   else if (k == "Color") {
                    $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <input type="color" '
                           + 'placeholder=' + v + ' name=' + chart_id + ' value=' + v + '  class="indet form-control mb-3" id=' + k + ' value=#ff0000/></div></div>');
                   }
                   else{
                     $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <input type="search" '
                           + 'placeholder=' + v + ' name=' + chart_id + ' value=' + v + ' class="indet form-control mb-3" id=' + k + ' ondrop="drop(event)" ondragover="allowDrop(event)"/></div></div>');
                   }
            });

            $("#container_chart").show();
            $("#container_chart").css({ display: "flex" });
            //$("#saviid").show();///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            $(".chartContainer2").show();
            if (chart_id != "tabular") {
                $(".chartContainer2").addClass("card p-3");
            }
            else {
                $(".chartContainer2").removeClass("card p-3");
            }

            if ($("#container").is(":visible") && $("#chartDiv").is(":visible")) {
                $('#container').hide();
            }

              $('#container').hide();
              document.getElementById('chartDiv').style.display = "block";
              var model = @Html.Raw(Json.Encode(Model.json_tuple));
              //console.log("modeldata", model);
               var dictData = [];

               var dta = "a";
               var chartpara = "";
               if (chart_id != "tabular") {
                   var id, trimid, name;
                   $.each(result, function (k,v) {


                       var grade = v;/*$(item).val();*/
                       chartpara += grade;

                       id = k;//$(item).attr("id");
                       name = chart_id;// $(item).attr("name");

                       trimgrade = grade.trim();
                       trimid = id.trim();

                       var myObject = eval('(' + model + ')');

                      // console.log("MyObject",myObject);
                       var grade = [];

                       if (trimgrade !== "" && trimid !== "") {
                           for (i in myObject) {
                               storedata = myObject[i][trimgrade]
                               grade.push(storedata);
                           }
                           dictData.push({
                               key: id,
                               value: grade
                           });
                       }

                   });
               }

               $("#saviid").show();

               if (chart_id == "label") {
                   $("#myChart").hide();
                   $('#tabular_container').hide();
                   $('#labelgraph_container').show();
                   label_plot2();
               }
               else {
                   if (chart_id == "tabular") {
                       $("#myChart").hide();
                       $('#labelgraph_container').hide();
                       $('#tabular_container').show();
                       tabular2(dictData);
                       table_edit_mode();
                      // show_functions();
                   }
                  if (chart_id != "label" && chart_id != "tabular") {
                       $("#myChart").show();
                      $('#tabular_container').hide();
                      $('#labelgraph_container').hide();
                       DrowTheGraph(dictData, chart_id);
                   }
               }

        }
        $(function () {
            $('#contact_edit').trigger('onload');
        });
    </script>

    <script>
        $("#myTabmains li a.main_menu").click(function () {
            $("#loadChartView").hide();
        });
        function datahide() {
            $('#container').hide();
            $("#contact-tab").css("pointer-events", "all");
            $("#labelgraph_container").hide();
            $("#chartDiv").hide();
            $("#tabular_container").hide();
            $(".tab-active1").attr("disabled", false);
        }
        function imgbtn() {
            $("#profile-tab").css("pointer-events", "all");
            $(".tab-active").attr("disabled", false);
        }
    </script>

    <script>
        $(".panel-left").resizable({
            handleSelector: ".splitter",
            resizeHeight: false
        });
        $(".panel-top").resizable({
            handleSelector: ".splitter-horizontal",
            resizeWidth: false
        });
    </script>

    <!-- CLICK EVENT FOR BUTTON CLASS-->
    <script>
        var countNumber = 1;
        $(".button").click(function () {
            var t = (this.id);
            var count_color_height = 1;
            var chart_id = $(this).attr('data-id');
            var chart_params = $(this).attr('data-value');
            $.ajax({
                type: "POST",
                url: '../Graph/ChartView',
                datatype: "html",
                data: { chartpa: chart_params, chart_id: chart_id },
                success: function (data) {
                    if (data) {
                    }
                }
            });


            var imgpath = $(this).attr('data-img');
            imgpath = imgpath.replace("~", "..")
            var description = $(this).attr('data-description');
            var resultJSON = chart_params;


            var charttype;

            if (chart_id != "tabular") {
                var result = $.parseJSON(resultJSON);

            }
            var container = document.getElementById("container_chart");
            //var container1 = document.getElementById("droppableHolder");

            charttype = chart_id;

            while (container.hasChildNodes()) {
                container.removeChild(container.lastChild);
            }

            // $('#container_chart').hide();
            $("#chartDiv").hide();
            $('#container').show();
            $('#container').empty()
            $('#container_chart').hide();

            var newNote = $("<div class='card p-2'><img class='card-img-top mt-1'  src= " + imgpath + " alt=" + chart_id + ">");//<p class='card-text'>" + description + "</p>  <div class='card-body'><h4 class='card-title' style='display:none'>" + chart_id + "</h4></div>

            $("#container").append(newNote);

            if (chart_id == "label") {
                $.each(result, function (k, v) {
                    if (k == "Label") {
                        $(container).append('<div class="col-12 mb-2"><button type="button" id="BtnAddLabelRow" class="btn btn-dash ml-2 float-right"><i class="fa fa-plus"></i></button>'
                            + '<button type="button" id="BtnDeleteLabelRow" class="btn btn-dash ml-2 float-right"><i class="fa fa-minus"></i></button>'
                            + '</div>');

                        $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label> <div style="display:flex"> <input type="search"'
                            + 'placeholder=' + v + ' name=' + charttype + '  class="indet form-control mb-3 labelInputTag" id=' + k + ' data-id="' + k + '" /><select name="drop_down_label"  style="width: 87px;" class="indet form-control mb-3" id=' + k + '>'
                            + '<option value=Avg>Avg</option><option value=Sum>Sum</option></select></div></div></div>');
                    }
                    else if (k == "Color") {
                        $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>'
                            + '<div style="display:flex"><input type="text" class="mb-3 togglePaletteOnly" name="togglePaletteOnly" id=' + k + ' />'
                            + '<select name = "drop_down_position"  style = "width: 140px;height: 25px;" class= "indet form-control mb-3" id = ' + k + ' > '
                            + '<option value=ul>Upper Left</option><option value=ur>Upper Right</option><option value=um>Upper Middle</option>'
                            + '<option value=ml>Middle Left</option><option value=mr>Middle Right</option><option value=mm>Middle Middle</option>'
                            + '<option value=ll>Lower Left</option><option value=lr>Lower Right</option><option value=lm>Lower Middle</option>'
                            + '</select></div></div></div>');
                    }
                    else if (k == "Caption") {
                        //$(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><input type="search"' +
                        /// 'placeholder=' + v + ' name=' + charttype + ' placeholder=' + v + ' class="indet form-control mb-3" id=' + k + ' data-id="' + k + '"  /> </div></div>');
                        $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><input type="search"' +
                            'placeholder=' + v + ' name=' + k + ' class="indet form-control mb-3" id=' + k + ' data-id="' + k + '" data-val="' + charttype + '" /> </div></div>');

                    }
                    else { }

                    $('#' + k).droppable({
                        hoverClass: 'active',
                        drop: function (event, ui) {
                            this.value = (ui.draggable[0].getAttribute("data-id"));
                        }
                    });
                })
                $('#BtnDeleteLabelRow').css('display', 'none');
            }
            else if (chart_id == "tabular") {
                $(container).append('<div id="tabular_column_data"></div>');
            }
            else {
                $.each(result, function (k, v) {
                    if (k == "Label") {
                        $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label> <div style="display:flex"> <input type="search"' +
                            'placeholder=' + v + ' name=' + charttype + '  class="indet form-control mb-3" id=' + k + ' /><select name="drop_down_label"  style="width: 87px;" class="indet form-control mb-3" id=' + k + '>' +
                            ' <option value=Avg>Avg</option>  <option value=Sum>Sum</option> </select> </div></div></div>');
                    }
                    else if (k == "Color") {
                        $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style" style="padding-bottom: 11px;"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>   <input type="text" class="togglePaletteOnly" name="togglePaletteOnly" id=' + k + '   /></div>  </div></div>');
                    }
                    else if (chart_id == "scatter" || chart_id == "bubble" || chart_id == "bar" || chart_id == "line" || chart_id == "bar_threshold" || chart_id == "line_threshold" || chart_id == "area" || chart_id == "step_line" || chart_id == "stacked_bar" || chart_id == "spline" || chart_id == "heatmap" || chart_id == "histogram") {

                        if (chart_id == "line_threshold" || chart_id == "bar_threshold") {

                            if (k == "Height") {

                                $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style1" style=" overflow:auto"><label for="validationDefault01" style= "margin:0px;">' + k + '</label> <div style="display:flex"><input type="search"' +
                                    ' name=' + charttype + ' class="indet form-control mb-3" placeholder=' + v + ' data_id_name=' + k + ' id=' + k + ' /> <input type="text" id="' + countNumber + '" class="togglePaletteOnly" name="togglePaletteOnly" value="#fff" /> <i style="margin-top: 9px;" class="fa fa-remove" onclick=" $(this).parent().remove();"></i></div></div></div>');

                            }
                            else if (k == "Threshold") {

                                $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style2" style=" overflow:auto"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><div style="display:flex"> <input type="search"' +
                                    ' name=' + charttype + ' class="indet form-control mb-3" placeholder=' + v + ' data_id_name=' + k + ' id=' + k + ' /><i style="margin-top: 9px;" class="fa fa-remove ml-2" onclick=" $(this).parent().remove();"></i></div></div></div>');
                            }
                            else {
                                $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <input type="search"' +
                                    'placeholder=' + v + ' name=' + charttype + ' placeholder=' + v + ' class="indet form-control mb-3" id=' + k + ' />  </div></div>');

                            }
                        }
                        else {
                            if (k == "Height") {
                                $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style1" style=" overflow:auto"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><div style="display:flex"> <input type="search"' +
                                    ' name=' + charttype + ' class="indet form-control mb-3"  placeholder=' + v + ' data_id_name=' + k + ' id=' + k + ' /><input type="text" id="' + countNumber + '" class="togglePaletteOnly"  name="togglePaletteOnly" value="#fff" /><i style="margin-top: 9px;" class="fa fa-remove" onclick=" $(this).parent().remove();"></i></div></div></div>');
                            }
                            else {
                                $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <input type="search"' +
                                    'placeholder=' + v + ' name=' + charttype + ' placeholder=' + v + ' class="indet form-control mb-3" id=' + k + ' />  </div></div>');
                            }
                        }

                    }
                    else {
                        if (k != "Select") {
                            if (k == "Caption") {
                                $(container).append('<div class="col-md-4 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><input type="search"' +
                                    'placeholder=' + v + ' name=' + charttype + ' placeholder=' + v + ' class="indet form-control mb-3" id=' + k + ' /> </div></div>');
                            }
                            else {
                                $(container).append('<div class="col-md-6 mb-4"><div class= "drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>  <input type="search"' +
                                    'placeholder=' + v + ' name=' + charttype + '  class="indet form-control mb-3" id=' + k + ' /> </div></div>');

                            }
                        }
                    }

                    if (k == "Height") {
                        $('#' + k).droppable({
                            hoverClass: 'active',
                            drop: function (event, ui) {
                                add(k, v, charttype, count_color_height);
                                //this.value += (ui.draggable[0].getAttribute("data-id"));
                                this.value = (ui.draggable[0].getAttribute("data-id"));
                                count_color_height++;
                            }
                        });
                    }
                    else if (k == "Threshold") {
                        $('#' + k).droppable({
                            hoverClass: 'active',
                            drop: function (event, ui) {
                                add1(k, v, charttype);
                                //this.value += (ui.draggable[0].getAttribute("data-id"));
                                this.value = (ui.draggable[0].getAttribute("data-id"));

                            }
                        });
                    }
                    else {
                        $('#' + k).droppable({
                            hoverClass: 'active',
                            drop: function (event, ui) {
                                //this.value += (ui.draggable[0].getAttribute("data-id"));
                                this.value = (ui.draggable[0].getAttribute("data-id"));
                            }
                        });
                    }
                });
            }
        });
    </script>

    <script>
        function createNewLabelColumn(charttype, result) {
            var container = document.getElementById("container_chart");
            $.each(result, function (k, v) {
                if (k == "Label") {
                    $(container).append('<div class="col-md-4 mb-4 newlabel"><div class="drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label> <div style="display:flex"><input type="search"'
                        + 'placeholder=' + v + ' name=remove_' + charttype + '  class="indet form-control mb-3 labelInputTag ' + k + '"  data-id="' + k + '" /><select name="drop_down_label"  style="width: 87px;" class="indet form-control mb-3" id=' + k + '>'
                        + '<option value=Avg>Avg</option><option value=Sum>Sum</option></select></div></div></div>');
                }
                else if (k == "Color") {
                    $(container).append('<div class="col-md-4 mb-4 newlabel"><div class="drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label>'
                        //+ '<div style="display:flex"><input type="text" class="mb-3 togglePaletteOnly" name="togglePaletteOnly" id=' + k + ' />'
                        + '<select name = "drop_down_position" class= "indet form-control mb-3"> '
                        + '<option value=ul>Upper Left</option><option value=ur>Upper Right</option><option value=um>Upper Middle</option>'
                        + '<option value=ml>Middle Left</option><option value=mr>Middle Right</option><option value=mm>Middle Middle</option>'
                        + '<option value=ll>Lower Left</option><option value=lr>Lower Right</option><option value=lm>Lower Middle</option>'
                        + '</select></div></div></div>');
                }
                else if (k == "Caption") {
                    $(container).append('<div class="col-md-4 mb-4 newlabel"><div class="drag-style"><label for="validationDefault01" style= "margin:0px;">' + k + '</label><input type="search"' +
                        'placeholder=' + v + ' name=' + k + ' placeholder=' + v + ' class="indet form-control mb-3 ' + k + '" data-id="' + k + '"  data-val="' + charttype + '" /> </div></div>');
                }
                else { }

                $('.' + k).droppable({
                    hoverClass: 'active',
                    drop: function (event, ui) {
                        this.value = (ui.draggable[0].getAttribute("data-id"));
                    }
                });
            })
        }
        $(document).on('click', '#BtnAddLabelRow', function () {
            var chartId = $('.button').attr('data-id');
            var chart_data = $('.button').attr('data-value');
            var JSON_result = $.parseJSON(chart_data);
            //console.log("JSON_result:", JSON_result);
            $('#BtnDeleteLabelRow').css('display', 'block');
            createNewLabelColumn(chartId, JSON_result);
        });
        $(document).on('click', '#BtnDeleteLabelRow', function () {
            for (var i = 0; i < 3; i++) {
                $('#container_chart .newlabel:last').remove();
            }
            var newdata = $('#container_chart .newlabel').html();
            //console.log("newdata:", newdata);
            if (newdata == null || newdata == '' || newdata == undefined) {
                $('#BtnDeleteLabelRow').css('display', 'none');
            }
        });
    </script>

    <!-- DEFINING add, add1, and colorpicker FUNCTION-->
    <script>
        var addColorData = [];
        var colorVal = '#fff';
        function add(k, v, charttype, count_color_height) {
            var functiondata = "add('" + k + "','" + v + "','" + charttype + "','" + count_color_height + "')";
            var randomChars = '0123456789';
            var result = '';
            for (var i = 0; i < 20; i++) {
                result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
            }
            var idd = result;
            countNumber++;
            //var fieldHTML = ('<div style="display:flex"><input type="search" name="' + charttype + '" class="indet form-control mb-2" placeholder="number" data_id_name="Height" ondrop="add(1,1,1)"  id=' + result + ' /> <input type="text" class="togglePaletteOnly"  name="togglePaletteOnly"/><i style="margin-top: 9px;" class="fa fa-remove" onclick="$(this).parent().remove();"></i></div>');
            var fieldHTML = ('<div style="display:flex"><input type="search" name="' + charttype + '" class="indet form-control mb-3" placeholder="' + v + '" data_id_name="Height" ondrop=' + functiondata + '  id=' + result + ' />'
                + '<input type="text" id="' + countNumber + '" class="togglePaletteOnly"  name="togglePaletteOnly" value="#fff"/>'
                + '<i style="margin-top: 9px;" class="fa fa-remove" onclick="$(this).parent().remove();"></i></div>');

            $(".drag-style1").append(fieldHTML);

            if (addColorData.length != 0) {
                colorVal = getColorValue(addColorData, countNumber);
            }

            $('#' + result).droppable({
                hoverClass: 'active',
                drop: function (event, ui) {
                    this.value += (ui.draggable[0].getAttribute("data-id"));
                }
            });

            $(".togglePaletteOnly").spectrum({

                showPaletteOnly: true,
                togglePaletteOnly: true,
                togglePaletteMoreText: 'more',
                togglePaletteLessText: 'less',
                /*color: '#fff',*/
                color: colorVal,
                /* color: colorData,*/
                palette: [
                    /*   ["#fff", "#f3f3f3", "#eee", "#ccc", "#999", "#666", "#444", "#000"],*/
                    ["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"],
                    ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                    ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                    ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                    ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
                    ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"],
                    ["#900", "#b45f06", "# ", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"],
                    ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]
                ],
                move: function (color) {
                    colorVal = color.toHexString();
                    addColorData.push({
                        key: $(this).attr('id'),
                        value: colorVal
                    });
                }
            });

            /*$('.sp-replacer').css("width", "20%");*/


        }
        function add1(k, v, charttype) {
            var functiondata = "add1('" + k + "','" + v + "','" + charttype + "')";
            var randomChars = '0123456789';
            var result = '';
            for (var i = 0; i < 20; i++) {
                result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
            }
            var idd = result;
            //var fieldHTML = ('<div style="display:flex"><input type="search"' + ' name=' + charttype + '  class="indet form-control mb-2" placeholder="number" data_id_name="Threshold" ondrop="add1(1,1,1)" id=' + result + ' /><i style="margin-top: 9px;" class="fa fa-remove" onclick=" $(this).parent().remove();"></i></div>');
            var fieldHTML = ('<div style="display:flex"><input type="search" name="' + charttype + '" class="indet form-control mb-3" placeholder="' + v + '" data_id_name="Threshold" ondrop=' + functiondata + '  id=' + result + ' />' +
                '<i style="margin-top: 9px;" class="fa fa-remove ml-2" onclick=" $(this).parent().remove();"></i></div>');

            $(".drag-style2").append(fieldHTML);

            $('#' + result).droppable({
                hoverClass: 'active',
                drop: function (event, ui) {
                    this.value += (ui.draggable[0].getAttribute("data-id"));
                }
            });
        }
        function colorpicker() {

            $(".togglePaletteOnly").spectrum({
                showPaletteOnly: true,
                togglePaletteOnly: true,
                togglePaletteMoreText: 'more',
                togglePaletteLessText: 'less',
                color: '#fff',
                palette: [
                    ["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"],
                    ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"],
                    ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"],
                    ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"],
                    ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"],
                    ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"],
                    ["#900", "#b45f06", "# ", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"],
                    ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]
                ]
                //move: function (color) {
                //    colorval = color.tohexstring();
                //    addcolordata.push({
                //        key: $(this).attr('id'),
                //        value: colorval
                //    });
                //}
            });

            var imagedata1 = $('#container').find('.card-img-top').attr('alt');
            if (imagedata1 == "label") {
                //$('.sp-replacer').css("width", "100%");
                //$('.picker').css("width", "285px");
                $('.sp-replacer').css("width", "50%");
                $('.picker').css("width", "132px");
            }
            else {
                /* $('.sp-replacer').css("width", "20%");*/
            }

        }
        function getUniqueListBy(arr, key) {
            return [...new Map(arr.map(item => [item[key], item])).values()]
        }
        function getColorValue(addColorData, key_element) {
            var result = addColorData.filter(function (element) {
                return element.key == key_element;
            });

            if (result.length > 0) {
                var var_val = result[0].value;
                return var_val;
            }
        }
    </script>

    <script>
        $("#home-tab").click(function () {
            $('#chartDiv').hide();
            $('#data_container').hide();//new
            $("#container_chart").hide();
            $("#chartContainer2").hide();//////////////////////////////////////////////////////////new////////////////////
            $(".map_data").hide();
            $("#tabular_container").hide();
            $("#labelgraph_container").hide();

            $("#saviid").hide();
            $("#mapping-d1").hide();
            if ($("#container").is(":visible") && $("#chartDiv").is(":visible")) {
                $('#container').hide();////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////ch//////////////////////////////////////////////
                if (imagedata == "tabular") {
                    $("#myChart").hide();
                    $("#labelgraph_container").hide();
                }
                else if (imagedata == "label") {
                    $("#myChart").hide();
                    $("#tabular_container").hide();
                }
                else {
                    $("#myChart").show();
                }
            }
            $(".chartContainer2").hide();


            ///new 15 june
            $("#profile-tab").css("pointer-events", "none");
            $("#contact-tab").css("pointer-events", "none");

            $(".tab-active1").attr("disabled", true);
            $(".tab-active").attr("disabled", true);

            //$(".card1").removeClass("active");
        });
        $("#profile-tab").click(function () {
            $("#container_chart").hide();
            $("#saviid").hide();
            $("#mapping-d1").hide();
            $(".chartContainer2").hide();
            $(".map_data").hide();
            $(".tab-active1").attr("disabled", true);
            $(".tab-active").attr("disabled", true);
            //$(".card1").removeClass("active");

        });
        function remove(el) {
            var element = el;
            element.remove();
        }
        function tab3() {
            var imagedata = $('#container').find('.card-img-top').attr('alt');//$('#container').find('h4.card-title').html();
            $('#data_container').empty();//new
            // $('#container').show();//new
            $('#container').show();
            $("#container_chart").show();
            //$("#container_chart").css({ display: "flex" });//new change
            $("#saviid").hide();
            $(".chartContainer2").show();
            $('.map_data').show();

            var imagedata = $('#container').find('.card-img-top').attr('alt');//$('#container').find('h4.card-title').html();
            //if (imagedata != "tabular") { //new change
            //    $(".chartContainer2").addClass("card p-3");
            //}
            //else {
            //    $(".chartContainer2").removeClass("card p-3");
            //}
            if (imagedata != "tabular") {
                $("#container_chart").css({ display: "flex" });
            }
            else {
                $("#container_chart").css({ display: "block" });
            }
            $(".chartContainer2").addClass("card p-3");
            if ($("#container").is(":visible") && $("#chartDiv").is(":visible")) {
                $('#container').hide();
            }
        }
    </script>

    <!-- DEFINE show_functions, table_edit_mode AND showcolumn FUNCTIONS -->
    <script>
        function show_functions() {
            showcolumn();
            tab3();
        }
        function table_edit_mode() {
            var qid = 1;
            //alert(qid);
            $.ajax({
                type: "POST",
                url: '../Graph/_partialgetdataby_tabular', /*_partialgetdataby_id_columns*/
                datatype: "html",
                data: { getQuery_id: qid },
                success: function (data) {
                    if (data) {
                        $('#left_container').empty()
                        $("div").find("#left_container").append(data);
                    }
                }
            });
        }
        function showcolumn() {
            var imagedata = $('#container').find('.card-img-top').attr('alt');//$('#container').find('h4.card-title').html();

            if (imagedata != " ") {//tabular
                var qid = 1;
                $.ajax({
                    type: "POST",
                    url: '../Graph/_partialgetdataby_id_columns', /*_partialgetdataby_id_columns*/
                    datatype: "html",
                    data: { getQuery_id: qid },
                    success: function (data) {
                        if (data) {
                            $('#left_container').empty()
                            $("div").find("#left_container").append(data);
                        }
                    }
                });
                colorpicker();
            }
            if (imagedata == "tabular") {
                var qid = 1;
                $.ajax({
                    type: "POST",
                    url: '../Graph/_partialgetdataby_tabular', /*_partialgetdataby_id_columns*/
                    datatype: "html",
                    data: { getQuery_id: qid },
                    success: function (data) {
                        if (data) {
                            //$('#left_container').empty();
                            //$("div").find("#left_container").append(data);
                            $('#tabular_column_data').empty();
                            $("#tabular_column_data").append(data);
                        }
                    }
                });
            }
        }
    </script>

    <!-- CLICK EVENT FOR SaveChart AND BtnCloseKpi BUTTON -->
    <script>
        $('#SaveChart').click(function () {
            $('#myModal').modal('show');
        });
        $('.BtnCloseKpi').click(function () {
            $('#myModal').modal('hide');
            $('#kpi_name').siblings('span.error').css('visibility', 'hidden');
            $('#kpi_name').val('');
            $('#kpi_description').val('');
        });
    </script>

    <!-- CLICK EVENT FOR SUBMIT KPI -->
    <script>
        $('.BtnSubmitKpi').click(function () {
            var isAllValid = true;
            var imagedata = $('#container').find('.card-img-top').attr('alt');//$('#container').find('h4.card-title').html();
            var chart_id = $('#myTabInner a.active').attr("data-id");
            var chart_id_type = $(' #myTabInner a.active').attr("data-type");
           // console.log("chart_id:", chart_id);
            if ($('#kpi_name').val().trim() == '') {
                isAllValid = false;
                $('#kpi_name').siblings('span.error').css('visibility', 'visible');
            }
            else {
                $('#kpi_name').siblings('span.error').css('visibility', 'hidden');
            }
            var dictData = [];
            var colordata = [];
            var id, position, selects, colors, trimid, name;
            var chartpara = "{";
            var arr = [];
            arr.push("{")
            var dta = "a";
            if (imagedata != "tabular" && imagedata != "label") {
                $('.drag-style input[type=search]').each(function (i, item) {
                    var grade = $(item).val();
                    grade = "" + grade + "";
                    id = $(item).attr("id");
                    trimgrade = grade.trim();
                    trimid = id.trim();
                    dictData.push({
                        key: id,
                        value: grade
                    });
                });

                if (imagedata == "bar" || imagedata == "line" || imagedata == "line_threshold" || imagedata == "bar_threshold" || imagedata == "stacked_bar" || imagedata == "step_line" || imagedata == "spline" || imagedata == "bubble" || imagedata == "scatter" || imagedata == "area" || imagedata == "heatmap" || imagedata == "histogram") {
                    var gradeData = [];
                    //var colorData = [];
                    $('.drag-style1 input[type=search]').each(function (i, item) {
                        var grade = $(item).val();
                        if (grade != null && grade != '' && grade != undefined) {
                            gradeData.push(grade);
                        }
                    });
                    if (gradeData != null && gradeData != '') {
                        id = "Height";
                        trimid = id.trim();
                        dictData.push({
                            key: id,
                            value: gradeData.join()
                        });

                    }

                    $('.drag-style1 input[type=text]').each(function (i, item) {
                        var colorval = $(item).val();
                        if (colorval != null && colorval != '' && colorval != undefined) {
                            colordata.push(colorval);
                        }
                    });
                    colordata.pop();

                    var colorarray = '@ViewBag.DefineColor';
                    //console.log("colorarray:", colorarray);
                    var tempcolor = colorarray.split(",");
                    var tempI = -1;
                    colordata = colordata.map(function (x) { tempI++; return x.replace('#fff', tempcolor[tempI]); });
                    //console.log("colordata:", colordata);

                    if (colordata != null && colordata != '') {
                        id = "color";
                        dictData.push({
                            key: id,
                            value: colordata.join()
                        });
                    }
                }

                if (imagedata == "line_threshold" || imagedata == "bar_threshold") {
                    var ThresholdData = []
                    $('.drag-style2 input[type=search]').each(function (i, item) {
                        var grade = $(item).val();
                        if (grade != null && grade != '' && grade != undefined) {
                            ThresholdData.push(grade);
                        }
                    });

                    if (ThresholdData != null && ThresholdData != '') {
                        id = "Threshold";
                        trimid = id.trim();
                        dictData.push({
                            key: id,
                            value: ThresholdData.join()
                        });
                    }
                }

                for (let i = 0; i < dictData.length; i++) {
                    arr.push(dictData[i].key + ":" + dictData[i].value)
                    if (i < dictData.length - 1) {
                        dta = "\"" + dictData[i].value + "\"";
                        chartpara += "\"" + dictData[i].key + "\"" + ":" + dta + ","
                    }
                    else {
                        dta = "\"" + dictData[i].key + "\"";

                        chartpara += dta + ":" + "\"" + dictData[i].value + "\"";
                    }
                }

                chartpara += "}";
                arr.push("}");
            }
            else if (imagedata == "label") {
                var labelData = [];

                $('.drag-style input[type=search]').each(function (i, item) {
                    var grade = $(item).val();
                    grade = "" + grade + "";
                    id = $(item).attr("name").replace("remove_", "");
                    labelData.push({
                        [id]: grade
                    });
                });

                //$('.drag-style input.labelInputTag').each(function (i, item) {//input.labelInputTag
                //    if ($(item).val() != null && $(item).val() != '')
                //    {
                //        id = "Select";
                //        selects = $('select[name=drop_down_label]').val();
                //        labelData.push({
                //            [id]: selects
                //        });

                //        id = "Position";
                //        position = $('select[name=drop_down_position]').val();
                //        labelData.push({
                //            [id]: position
                //        });

                //    }
                //});

                $('.drag-style select[name=drop_down_label]').each(function (i, item) {//input.labelInputTag
                    if ($(item).val() != null && $(item).val() != '') {
                        id = "Select";
                        position = $(item).val();
                        labelData.push({
                            [id]: position
                        });
                    }
                });

                $('.drag-style select[name=drop_down_position]').each(function (i, item) {//input.labelInputTag
                    if ($(item).val() != null && $(item).val() != '') {
                        id = "Position";
                        position = $(item).val();
                        labelData.push({
                            [id]: position
                        });

                    }
                });

                $('.drag-style input[name=togglePaletteOnly]').each(function (i, item) {
                    id = $(item).attr("id");
                    colors = $(item).val();
                    labelData.push({
                        [id]: colors
                    });
                });

                let endData = {}
                labelData.forEach(d => {
                    const [dataKey] = Object.keys(d)
                    const relatedValues = labelData.map(d => dataKey in d ? d[dataKey] : null).filter(Boolean)
                    //endData[0][dataKey] = `${[relatedValues]}`
                    endData[dataKey] = `${[relatedValues]}`
                })

                chartpara = JSON.stringify(endData);
                console.log("chartpara:", chartpara);
            }
            else if (imagedata == "tabular") {
                //$("#kpiFunctionData1 input.getdata").each(function () {
                //    var row = $(this).closest('tr');
                //    var columns = row.find('select.org').val();
                //    var columns1 = row.find('.getdata').val();
                //    dictData.push({
                //        key: columns,
                //        value: columns1
                //    });

                //});
                $("#DynamicRow input.getdatapass").each(function () {
                    var row = $(this).closest('td');
                    var columns = row.find('select.SelectiveCol').val();
                    var columns1 = row.find('input.getdatapass').val();
                    if (columns != '' || columns1 != '') {
                        dictData.push({
                            key: columns,
                            value: columns1
                        });
                    }

                    //console.log("dictData:", dictData);
                })

                for (let i = 0; i < dictData.length; i++) {

                    arr.push(dictData[i].key + " :  " + "  " + dictData[i].value);
                    if (i < dictData.length - 1) {

                        dta = dictData[i].value;
                        if (dta != "") {
                            dta = "\"" + dictData[i].value + "\"";
                        }
                        else {
                            dta = "\"" + dictData[i].key + "\"";

                        }
                        chartpara += "\"" + dictData[i].key + "\"" + " :" + "  " + dta + ",";
                    }
                    else {
                        dta = "\"" + dictData[i].key + "\"";
                        dtv = dictData[i].value;
                        if (dtv != "") {
                            dtv = "\"" + dictData[i].value + "\"";
                        }
                        else {
                            dtv = "\"" + dictData[i].key + "\"";

                        }
                        chartpara += dta + ":  " + "  " + dtv;
                    }
                }

                chartpara += "}";

            }

            if (isAllValid) {
                var newDataVal = {
                    kpi_name: $("#kpi_name").val().trim(),
                    kpi_description: $('#kpi_description').val().trim(),
                    chart_id: chart_id,
                    kpi_chart_parameters: chartpara,
                    kpi_user_id: $('#kpi_user_type').val()
                    //system_kpi: $("#dashboardCheck").prop('checked')
                }
                console.log("newDataVal:", newDataVal);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Content("~/Graph/kpiSave")',
                    data: JSON.stringify(newDataVal),
                    contentType: 'application/json',
                    success: function (data) {
                        if (data.startsWith("ERROR")) {
                            var res = data.split(";");
                            var error = '';
                            if (res.length > 1) {
                                error = res[1];
                            } else {
                                error = data;
                            }
                            alert(error);
                        }
                        else {
                            alert('Data saved successfully!!!');
                            $('#myModal').modal('hide');
                             @*var dashboard_url = '@Url.Content("~/Graph/kpiview")';*@
                            var dashboard_url = '@Url.Content("~/Dynamic/Index?menu_name=KPI")';
                            window.location.href = dashboard_url;
                        }
                    },
                    error: function (error) {
                        alert('Error');
                    }
                });
            }
        });
    </script>

    <!-- CLICK EVENT FOR LOAD CHART -->
    <script>
        $('#loadchart1').click(function () {
            var imagedata = $('#container').find('.card-img-top').attr('alt');
            $('#container').hide();
            $("#saviid").show();
            document.getElementById('chartDiv').style.display = "block";
            var model = @Html.Raw(Json.Encode(Model.json_tuple));
            var dictData = [];
            var dta = "a";
            var chartpara = "";
            if (imagedata != "tabular" && imagedata != "label") {
                var id, trimid, name;
                $('.drag-style input[type=search]').each(function (i, item) {
                    var grade = $(item).val();
                    chartpara += grade;
                    id = $(item).attr("id");
                    name = $(item).attr("name");
                    trimgrade = grade.trim();
                    trimid = id.trim();

                    var myObject = eval('(' + model + ')');
                    var grade = [];
                    if (trimgrade !== "" && trimid !== "") {
                        for (i in myObject) {
                            storedata = myObject[i][trimgrade]
                            grade.push(storedata);
                        }
                        dictData.push({
                            key: id,
                            value: grade
                        });
                    }
                });

                if (imagedata == "bar" || imagedata == "line" || imagedata == "line_threshold" || imagedata == "bar_threshold" || imagedata == "heatmap" || imagedata == "histogram") {
                    $('.drag-style1 input[type=search]').each(function (i, item) {
                        var grade = $(item).val();
                        chartpara += grade;
                        id = $(item).attr("data_id_name");
                        name = $(item).attr("name");
                        trimgrade = grade.trim();
                        trimid = id.trim();
                        var myObject = eval('(' + model + ')');
                        var grade = [];

                        if (trimgrade !== "" && trimid !== "") {
                            for (i in myObject) {
                                storedata = myObject[i][trimgrade]
                                grade.push(storedata);
                            }
                            dictData.push({
                                key: id,
                                value: grade
                            });
                        }

                    });
                }
                if (imagedata == "line_threshold" || imagedata == "bar_threshold") {
                    $('.drag-style2 input[type=search]').each(function (i, item) {
                        var grade = $(item).val();
                        chartpara += grade;
                        id = $(item).attr("data_id_name");
                        name = $(item).attr("name");
                        trimgrade = grade.trim();
                        trimid = id.trim();
                        var myObject = eval('(' + model + ')');
                        var grade = [];

                        if (trimgrade !== "" && trimid !== "") {
                            for (i in myObject) {
                                storedata = myObject[i][trimgrade]
                                grade.push(storedata);
                            }
                            dictData.push({
                                key: id,
                                value: grade
                            });
                        }

                    });
                }
            }
            if (imagedata == "label") {
                $("#myChart").hide();
                $('#tabular_container').hide();
                $('#labelgraph_container').show();
                //label_plot1();
                plot_label();
            }
            else {
                if (imagedata == "tabular") {
                    $("#myChart").hide();
                    $('#labelgraph_container').hide();
                    $('#tabular_container').show();
                    //tabular1(dictData);
                    Newtabular();
                }
                if (imagedata != "label" && imagedata != "tabular") {
                    $("#myChart").show();
                    $('#tabular_container').hide();
                    $('#labelgraph_container').hide();
                    DrowTheGraph(dictData, imagedata);
                }
            }
        });
    </script>

    <!-- CREATING DYNAMIC CHART -->
    <script type="text/javascript">
        var myChart;
        var myChartConfigView;
        var script;
        function plot_label() {
            var colors;
            var formData = decodeURIComponent($('form').serialize());
            formData = formData.split("&remove_");
            var newData = [];
            for (let i = 0; i < formData.length; i++) {
                let obj = {};
                for (let entry of formData[i].split("&")) {
                    let pair = entry.split("=");
                    if (pair[0].toLowerCase() == 'label') {
                        if (pair[1] == null || pair[1] == '') {
                            obj = null
                            i++;
                            break;
                        }
                        else {
                            obj[pair[0]] = pair[1];
                        }
                    }
                    else {
                        obj[pair[0]] = pair[1];
                    }
                }
                newData.push(obj);
            }


            $('.drag-style input[name=togglePaletteOnly]').each(function (i, item) {
                colors = $(item).val();
            });

            if (colors == "") {
                //colors = "rgb(255, 235, 205)";
                colors = "rgb(111, 168, 220)";
            }
            newData[0]["togglePaletteOnly"] = colors;

            $.ajax({
                type: "POST",
                url: '../Graph/_partialLabelChart',
                data: { jsonInput: JSON.stringify(newData) },
                success: function (data) {
                    if (data.startsWith("ERROR")) {
                        var res = data.split(";");
                        var error = '';
                        if (res.length > 1) {
                            error = res[1];
                        } else {
                            error = data;
                        }
                        alert(error);
                    }
                    else {
                        $('#container_chart').hide;
                        $('#labelgraph_container').empty();
                        $("#labelgraph_container").append(data);

                    }
                },
                error: function (error) {
                    alert('Label cannot be null!!!');
                }

            });

        }
        function plot_label1() {
            var dictData = [];
            var labels, captions, selects, colors;
            $('.drag-style input[type=search]').each(function (i, item) {
                var grade = $(item).val();
                grade = "" + grade + "";
                //id = $(item).attr("id");    //trimid: XAxis,Heigth,Group,Color
                id = $(item).attr("class");    //trimid: XAxis,Heigth,Group,Color
                trimgrade = grade.trim();
                trimid = id.trim();
                dictData.push({
                    key: id,
                    value: grade
                });
            });
            var chartpara = "";
            var name1 = "";
            for (let i = 0; i < dictData.length; i++) {

                if (i == 0) {
                    labels = dictData[i].value;
                }
                else if (i == 1) {

                    captions = dictData[i].value;
                    if (captions == "") {
                        captions = labels;
                        vale = captions;
                    }
                    else {
                        captions = dictData[i].value;;
                        vale = captions;
                    }
                }
            }

            $('.drag-style select[name=drop_down_label]').each(function (i, item) {
                selects = $(item).val();
            });

            $('.drag-style input[type =text]').each(function (i, item) {
                colors = $(item).val();
            });

            if (colors == "") {
                colors = "rgb(255, 235, 205)";
            }
            $.ajax(
                {
                    type: "POST",
                    url: '../Graph/_partialgetdataby_label',
                    datatype: "html",
                    //data: { columnname: chartpara, name: name1},
                    data: { label1: labels, caption1: captions, select1: selects, color1: colors },
                    //success: function (data) {
                    //    if (data) {

                    //        $('#container_chart').hide;
                    //        $('#labelgraph_container').empty();
                    //        $("#labelgraph_container").append(data);


                    //    }
                    //}

                    success: function (data) {
                        if (data.startsWith("ERROR")) {
                            var res = data.split(";");
                            var error = '';
                            if (res.length > 1) {
                                error = res[1];
                            } else {
                                error = data;
                            }
                            alert(error);
                        }
                        else {
                            $('#container_chart').hide;
                            $('#labelgraph_container').empty();
                            $("#labelgraph_container").append(data);

                        }
                    },
                    error: function (error) {
                        alert('Label cannot be null!!!');
                    }

                });

        }
        function label_plot2() {
            var dictData = [];
            var chartpara = "";
            var name1 = "";

            var resultJSON = @Html.Raw(Json.Encode(Model.chart_selected_params_edit));
            $('.drag-style select[name=drop_down_label]').each(function (i, item) {
                selects = $(item).val();
            });
            $('.drag-style input[type =text]').each(function (i, item) {
                colors = $(item).val();
            });
            $.ajax({
                type: "POST",
                url: '../Graph/_partialgetdataby_label_edit',
                datatype: "html",
                data: { columnname: resultJSON, select1: selects, color1: colors },
                success: function (data) {
                    if (data) {
                        $('#container_chart').hide;
                        $('#labelgraph_container').empty();
                        $("#labelgraph_container").append(data);
                    }
                }
            });
        }
        function label_plot1() {
            var dictData = [];
            var labels, captions, selects, colors;
            $('.drag-style input[type=search]').each(function (i, item) {
                var grade = $(item).val();
                grade = "" + grade + "";
                id = $(item).attr("id");    //trimid: XAxis,Heigth,Group,Color
                trimgrade = grade.trim();
                trimid = id.trim();
                dictData.push({
                    key: id,
                    value: grade
                });
            });

            var chartpara = "";
            var name1 = "";
            for (let i = 0; i < dictData.length; i++) {

                if (i == 0) {
                    labels = dictData[i].value;
                }
                else if (i == 1) {

                    captions = dictData[i].value;
                    if (captions == "") {
                        captions = labels;
                        vale = captions;
                    }
                    else {
                        captions = dictData[i].value;;
                        vale = captions;
                    }
                }
            }

            $('.drag-style select[name=drop_down_label]').each(function (i, item) {
                selects = $(item).val();
            });

            $('.drag-style input[type =text]').each(function (i, item) {
                colors = $(item).val();
            });

            if (colors == "") {
                colors = "rgb(255, 235, 205)";
            }

            $.ajax({
                type: "POST",
                url: '../Graph/_partialgetdataby_label',
                datatype: "html",
                //data: { columnname: chartpara, name: name1},
                data: { label1: labels, caption1: captions, select1: selects, color1: colors },
                //success: function (data) {
                //    if (data) {

                //        $('#container_chart').hide;
                //        $('#labelgraph_container').empty();
                //        $("#labelgraph_container").append(data);


                //    }
                //}

                success: function (data) {
                    if (data.startsWith("ERROR")) {
                        var res = data.split(";");
                        var error = '';
                        if (res.length > 1) {
                            error = res[1];
                        } else {
                            error = data;
                        }
                        alert(error);
                    } else {
                        $('#container_chart').hide;
                        $('#labelgraph_container').empty();
                        $("#labelgraph_container").append(data);
                    }
                },
                error: function (error) {
                    alert('Label cannot be null!!!');
                }

            });

        }
        function tabular1(data) {
            var dictData = [];
            $("#kpiFunctionData1 input.getdata").each(function () {
                var row = $(this).closest('tr');
                var columns = row.find('select.org').val();
                var columns1 = row.find('.getdata').val();

                dictData.push({
                    key: columns,
                    value: columns1
                });
                //console.log("dictData:", dictData);
            })

            var arr = [];

            var dta = "a";
            var chartpara = "";
            for (let i = 0; i < dictData.length; i++) {

                arr.push(dictData[i].key + " as  " + "  " + dictData[i].value)
                if (i < dictData.length - 1) {

                    dta = dictData[i].value;
                    if (dta != "") {
                        dta = "\"" + dictData[i].value + "\"";
                    }
                    else {
                        //dta = dictData[i].key;
                        dta = "\"" + dictData[i].key + "\"";

                    }
                    chartpara += dictData[i].key + " as " + "" + dta + ","
                }
                else {

                    dta = dictData[i].key;//"\"" + dictData[i].key + "\"";
                    dtv = dictData[i].value;
                    if (dtv != "") {
                        //dtv = dictData[i].value;
                        dtv = "\"" + dictData[i].value + "\"";
                    }
                    else {
                        //dtv = dictData[i].key
                        dtv = "\"" + dictData[i].key + "\"";

                    }
                    chartpara += dta + "  as  " + "" + dtv;//dictData[i].value;
                }
            }


            $.ajax(
                {
                    type: "POST",
                    url: '../Graph/tabular_plot',
                    datatype: "html",
                    data: { columnname: chartpara },
                    success: function (data) {
                        if (data) {
                            $('#container_chart').hide;
                            $('#tabular_container').empty();
                            $("#tabular_container").append(data);
                        }
                    }
                });

        }
        function tabular2(data) {
            var dictData = [];
            var resultJSON = @Html.Raw(Json.Encode(Model.chart_selected_params_edit));

            $.ajax({
                type: "POST",
                url: '../Graph/tabular_plot_edit',
                datatype: "html",
                data: { columnname: resultJSON },
                success: function (data) {
                    if (data) {

                        $('#container_chart').hide;
                        $('#tabular_container').empty();
                        $("#tabular_container").append(data);
                    }
                }
            });

        }
        function DrowTheGraph(data, name) {
            var ActualdictData = [];
            var threshld = [];
            var Xaxisvalue = [];
            var colors1 = [];
            var result = data.filter(function (element) {
                return element.key == 'Xaxis';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Xaxisvalue = (result[0].value);
            }
            var Hightvalue = [];

            var result = data.filter(function (element) {
                return element.key == 'Height';
            });

            if (name == "line_threshold" || name == "bar_threshold" || name == "spline" || name == "bar" || name == "line" || name == "scatter" || name == "bubble" || name == "stacked_bar" || name == "step_line" || name == "area" || name == "heatmap" || name == "histogram") {
                var dictData = [];
                $('.drag-style1 input[type=search]').each(function (i, item) {
                    var grade = $(item).val();
                    dictData.push(grade);
                });

                $('.drag-style1 input[type=text]').each(function (i, item) {
                    var colorData = $(item).val();
                    if (colorData != null && colorData != '' && colorData != undefined) {
                        colors1.push(colorData);
                    }
                });

                for (i = 0; i < result.length; i++) {
                    Hightvalue[i] = (result[i].value);
                    ActualdictData.push({
                        key: dictData[i],
                        value: Hightvalue[i]
                    })
                }
            }
            else {
                if (result.length > 0) {
                    // we have found a corresponding element
                    Hightvalue = (result[0].value);
                }
            }

            var Groupvalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Group';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Groupvalue = (result[0].value);
            }

            var Colorvalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Color';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Colorvalue = (result[0].value);
            }

            var Datevalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Date';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Datevalue = (result[0].value);
            }

            var Highvalue = [];
            var result = data.filter(function (element) {
                return element.key == 'High';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Highvalue = (result[0].value);
            }

            var Lowvalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Low';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Lowvalue = (result[0].value);
            }

            var Openvalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Open';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Openvalue = (result[0].value);
            }

            var Closevalue = [];
            var result = data.filter(function (element) {
                return element.key == 'Close';
            });

            if (result.length > 0) {
                // we have found a corresponding element
                Closevalue = (result[0].value);
            }


            var threshold = [];
            var result = data.filter(function (element) {
                return element.key == 'Threshold';
            });



            if (name == "line_threshold" || name == "bar_threshold") {
                var thrhld = []
                $('.drag-style2 input[type=search]').each(function (i, item) {
                    var grade = $(item).val();
                    thrhld.push(grade);
                });

                for (i = 0; i < result.length; i++) {
                    Hightvalue[i] = (result[i].value);
                    threshld.push({
                        key: thrhld[i],
                        value: result[i].value
                    })
                }
            }
            else {

                if (result.length > 0) {
                    // we have found a corresponding element
                    threshold = (result[0].value);
                }

            }

            var xvl = $("#Xaxis").val();
            var hvl = $("#Height").val();
            var gvl = $("#Group").val();
            var cvl = $("#Color").val();
            var dvl = $("#Date").val();
            var highvl = $("#High").val();
            var lowvl = $("#Low").val();
            var openvl = $("#Bars").val();
            var closevl = $("#Bars").val();

            change(name, colors1, ActualdictData, threshld, Xaxisvalue, Hightvalue, Groupvalue, Colorvalue, Datevalue, Highvalue, Lowvalue, Openvalue, Closevalue, xvl, gvl, hvl, cvl, dvl, highvl, lowvl, openvl, closevl);
        }
        function random_rgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';
        }
        function generateData() {
            var data = [];
            var dt = moment().subtract(365, "days").startOf("day");
            var end = moment().startOf("day");
            while (dt <= end) {
                data.push({
                    x: dt.format("YYYY-MM-DD"),
                    y: dt.format("e"),
                    d: dt.format("YYYY-MM-DD"),
                    v: Math.random() * 50
                });
                dt = dt.add(1, "day");
            }
            return data;
        }
        function Newtabular() {
            var dictData = [];
            $("#DynamicRow input.getdatapass").each(function () {
                var row = $(this).closest('td');
                var columns = row.find('select.SelectiveCol').val();
                var columns1 = row.find('input.getdatapass').val();
                if (columns != '' || columns1 != '') {
                    dictData.push({
                        key: columns,
                        value: columns1
                    });
                }

                //console.log("dictData:", dictData);
            })
            var arr = [];
            var dta = "a";
            var chartpara = "";
            for (let i = 0; i < dictData.length; i++) {

                arr.push(dictData[i].key + " as  " + "  " + dictData[i].value)
                if (i < dictData.length - 1) {

                    dta = dictData[i].value;
                    if (dta != "") {
                        dta = "\"" + dictData[i].value + "\"";
                    }
                    else {
                        //dta = dictData[i].key;
                        dta = "\"" + dictData[i].key + "\"";

                    }
                    chartpara += dictData[i].key + " as " + "" + dta + ","
                }
                else {

                    dta = dictData[i].key;//"\"" + dictData[i].key + "\"";
                    dtv = dictData[i].value;
                    if (dtv != "") {
                        //dtv = dictData[i].value;
                        dtv = "\"" + dictData[i].value + "\"";
                    }
                    else {
                        //dtv = dictData[i].key
                        dtv = "\"" + dictData[i].key + "\"";

                    }
                    chartpara += dta + "  as  " + "" + dtv;//dictData[i].value;
                }
            }
            $.ajax({
                type: "POST",
                url: '../Graph/tabular_plot',
                datatype: "html",
                data: { columnname: chartpara },
                success: function (data) {
                    if (data) {
                        $('#container_chart').hide;
                        $('#tabular_container').empty();
                        $("#tabular_container").append(data);
                        //defineTableFormat();
                    }
                }
            });
        }
        function defineTableFormat() {
            $("#kpitabularData").DataTable({
                "responsive": true, "lengthChange": false, "autoWidth": false, "pageLength": 8,
                language: {
                    oPaginate: {
                        sNext: '<i class="fa fa-forward"></i>',
                        sPrevious: '<i class="fa fa-backward"></i>'

                    }
                }
            });
        }
        function change(newType, colors1, ActualdictData, threshold, Xaxisvalue, Hightvalue, Groupvalue, Colorvalue, Datevalue, Highvalue, Lowvalue, Openvalue, Closevalue, xvl, gvl, hvl, cvl, dvl, highvl, lowvl, openvl, closevl) {
            $('#myChart').css("height", "334px");
            var tempcolors = ["#1b5583", "#41516D", "#4D8FAC", "#695acd", "#2a52be", "#0073cf", "#00a8ff", "#89CFF0", "#008081", "#40e0d0", "#00ffff"];
            var colorarray = '@ViewBag.DefineColor';
            var tempcolor = colorarray.split(",");
            var i = -1;
            colors1 = colors1.map(function (x) { i++; return x.replace('#fff', tempcolor[i]); });
            if (newType.toLowerCase() == "bubble" || newType.toLowerCase() == "scatter") {
                var xlabel = [];
                var label_data = [];
                if (Hightvalue.length > 0) {
                    var colors = ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"];

                    if (newType == "bubble") {
                        for (let i = 0; i < ActualdictData.length; i++) {
                            var datal = [];
                            for (let j = 0; j < Xaxisvalue.length; j++) {
                                if (i == 0) {
                                    xlabel.push(Xaxisvalue[j]);
                                }
                                datal.push({
                                    x: Xaxisvalue[j],
                                    y: Hightvalue[i][j],
                                    r: 6
                                });
                            }
                            label_data.push({
                                label: ActualdictData[i].key,
                                data: datal,
                                backgroundColor: colors1[i],// random_rgba()
                            });
                        }
                    }
                    else if (newType == "scatter") {
                        for (let i = 0; i < ActualdictData.length; i++) {
                            var datal = [];
                            for (let j = 0; j < Xaxisvalue.length; j++) {
                                if (i == 0) {
                                    xlabel.push(Xaxisvalue[j]);
                                }
                                datal.push({
                                    x: Xaxisvalue[j],
                                    y: Hightvalue[i][j]
                                });
                            }
                            label_data.push({
                                label: ActualdictData[i].key,
                                data: datal,
                                backgroundColor: colors1[i]
                            });
                        }
                    }
                    //console.log("labeldata_bubble", label_data);
                    var config = {
                        type: name,
                        data: {
                            labels: Xaxisvalue,
                            //labels: xlabel,
                            datasets: label_data
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            legend: {
                                display: true, position: 'top',
                                labels: {
                                    filter: function (item, data) {
                                        //alert(item.text);
                                        if (item.text != xvl) {
                                            return true;
                                        }
                                        else {
                                            return false;
                                        }
                                    }
                                }
                            },
                            scales: {
                                xAxes: {
                                    stacked: true
                                },
                                yAxes: {
                                    stacked: true
                                }
                            }

                        }
                    };
                }
            }
            else if (newType.toLowerCase() == "pie" || newType.toLowerCase() == "doughnut" || newType.toLowerCase() == "polararea") {
                var hat = [];
                var leng = Hightvalue.length;
                hat = Hightvalue;
                var config = {
                    type: name,
                    data: {
                        labels: Xaxisvalue,
                        datasets: [
                            {
                                /*backgroundColor: ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"],*/
                                backgroundColor: tempcolor,
                                data: Hightvalue,
                            },
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                right: "100px",
                                align: "middle"
                            }
                        }
                    }
                };
            }
            else if (newType.toLowerCase() == "line" || newType.toLowerCase() == "bar" || newType.toLowerCase() == "area" || newType.toLowerCase() == "spline") {
                var delayed;
                var colors = ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"];
                var datasset = [];
                var o_datasset = [];
                var o_dataset = null;

                var fl = false;
                var sl = false;
                var stked = false;
                var splin = 0;
                if (ActualdictData.length > 0) {
                    if (newType == "area".toLowerCase().toString()) {
                        fl = true;
                        newType = "line";
                        sl = false;
                    }
                    else if (newType == "spline".toLowerCase().toString()) {
                        newType = "line";
                        splin = 0.6;
                        fl = false;
                        sl = false;
                        stked = false;
                    }

                    for (let i = 0; i < ActualdictData.length; i++) {
                        datasset.push({
                            label: ActualdictData[i].key,
                            backgroundColor: colors1[i],
                            borderColor: colors1[i],
                            hoverBackgroundColor: colors1[i],
                            hoverBorderColor: colors1[i],
                            data: ActualdictData[i].value,
                            lineTension: splin,
                            fill: fl,
                            steppedLine: sl,
                        });
                    }
                    //console.log("DatasSet_BAR", datasset);
                    var config = {
                        type: newType,
                        data: {
                            labels: Xaxisvalue,
                            datasets: datasset
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true
                                },
                                tooltips: {
                                    enabled: true
                                }
                            },
                            scales: {
                                x: {
                                    stacked: false
                                },
                                y: {
                                    stacked: false
                                }
                            }
                        }
                    };
                }
            }
            else if (newType.toLowerCase() == "line_threshold" || newType.toLowerCase() == "bar_threshold") {
                var colors = ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"];
                var colors2 = ["red", "orange", "black", "purple"];
                var data22 = [0, 1500, 1500, 1500];
                var datasset = [];
                var o_datasset = [];
                var o_dataset = null;
                var th_m_set_max = [];
                var th_m_set_min = [];
                //console.log("threshold:", threshold);
                var fl = false;
                var sl = false;
                var stked = false;
                var splin = 0;

                if (ActualdictData.length > 0) {

                    for (i = 0; i < Xaxisvalue.length; i++) {
                        th_m_set_max.push(1550);
                    }

                    for (i = 0; i < Xaxisvalue.length; i++) {
                        th_m_set_min.push(100);
                    }

                    if (newType == "bar_threshold".toLowerCase().toString()) {
                        newType = "bar";
                        fl = false;
                        sl = false;
                        stked = false;
                    }
                    else if (newType == "line_threshold".toLowerCase().toString()) {
                        newType = "line";
                        splin = 0.6;
                        fl = false;
                        sl = false;
                        stked = false;
                    }


                    for (let i = 0; i < threshold.length; i++) {
                        datasset.push({
                            type: "line",
                            label: threshold[i].key,
                            backgroundColor: colors[i],
                            borderColor: colors2[i],
                            borderDash: [10, 10],
                            data: threshold[i].value,
                            lineTension: splin,
                            fill: fl,
                            steppedLine: sl,
                        });
                    }

                    for (let i = 0; i < ActualdictData.length; i++) {
                        datasset.push({
                            type: newType,
                            label: ActualdictData[i].key,
                            backgroundColor: colors1[i],
                            borderColor: colors1[i],
                            data: ActualdictData[i].value,
                            lineTension: splin,
                            fill: fl,
                            steppedLine: sl,
                        });
                    }


                    // console.log("DatasSet_BAR", datasset);

                    var config = {
                        //type: newType,
                        data: {
                            type: newType,
                            labels: Xaxisvalue,
                            datasets: datasset
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    position: 'top',
                                    align: 'center'
                                },
                                tooltips: {
                                    enabled: true
                                }
                            },
                            scales: {
                                x: {
                                    stacked: false
                                },
                                y: {
                                    stacked: false
                                }
                            }
                        }
                    };
                }
            }

            else if (newType.toLowerCase() == "radar") {
                var radarData = {
                    labels: Xaxisvalue,
                    datasets: [{
                        label: hvl,
                        data: Hightvalue,
                        fill: true,
                        backgroundColor: "lightblue",
                        borderColor: "blue"
                    }]
                };
                var config = {
                    type: newType,
                    data: radarData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top',
                                align: 'center'
                            },
                            tooltips: {
                                enabled: true
                            }
                        },
                        elements: {
                            line: {
                                borderWidth: 3
                            }
                        }
                    },
                };
            }
            else if (newType.toLowerCase() == "stacked_bar") {
                var colors = ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"];

                newType = 'bar';
                var datasset = [];
                for (let i = 0; i < ActualdictData.length; i++) {
                    datasset.push({
                        label: ActualdictData[i].key,
                        data: ActualdictData[i].value,
                        backgroundColor: colors1[i],
                        borderColor: colors1[i],
                        hoverBackgroundColor: colors1[i],
                        hoverBorderColor: colors1[i]
                    });
                }
                var config = {
                    type: newType,
                    data: {
                        labels: Xaxisvalue,
                        datasets: datasset
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true
                            },
                            tooltips: {
                                enabled: true
                            }
                        },
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true
                            }
                        }
                    }
                };
            }
            else if (newType.toLowerCase() == "step_line") {
                newType = 'line';
                var colors = ["Green", "Blue", "Gray", "Purple", "Yellow", "Red", "Black", "purple", "orange", "violet"];
                var datasset = [];
                for (let i = 0; i < ActualdictData.length; i++) {
                    datasset.push({
                        label: ActualdictData[i].key,
                        data: ActualdictData[i].value,
                        borderColor: colors1[i],
                        fill: false,
                        stepped: true
                    });
                }
                var config = {
                    type: 'line',
                    data: {
                        labels: Xaxisvalue,
                        datasets: datasset,
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true
                            },
                            tooltips: {
                                enabled: true
                            }
                        },
                        scales: {
                            x: {
                                stacked: false
                            },
                            y: {
                                stacked: false
                            }
                        },
                        interaction: {
                            intersect: false,
                            axis: 'x'
                        }
                    }
                };
            }

            else if (newType.toLowerCase() == "treemap") {
                $('#myChart').css("height", "250px");
                let arrayData = [];
                for (let i = 0; i < ActualdictData.length; i++) {
                    arrayData.push(ActualdictData[i].key);
                }

                let arr = [];
                Hightvalue.map((val, index) => {
                    let obj = { [xvl]: Xaxisvalue[index], [hvl]: val, };
                    arr.push(obj);
                });

                //console.log("ARRAY:", arr);

                var config = {
                    type: newType,
                    data: {
                        datasets: [{
                            //label: hvl,
                            tree: arr,
                            key: hvl,
                            groups: [xvl],
                            spacing: 0.5,
                            borderWidth: 1.5,
                            fontColor: "black",
                            fontSize: 9,
                            borderColor: "grey",
                            backgroundColor: tempcolor[0]
                            //backgroundColor: 'rgba(75, 00, 150, 0.2)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltips: {
                                callbacks: {
                                    title: function (item, data) {
                                        return data.datasets[item[0].datasetIndex].key;
                                    },
                                    label: function (item, data) {
                                        var dataset = data.datasets[item.datasetIndex];
                                        var dataItem = dataset.data[item.index];
                                        return dataItem.g + ': ' + dataItem.v;
                                    }
                                }
                            }
                        },

                    }
                }

            }
            else if (newType.toLowerCase() == "histogram") {
                newType = 'bar';  //bar
                var datasset = [];
                for (let i = 0; i < ActualdictData.length; i++) {
                    datasset.push({
                        label: ActualdictData[i].key,
                        data: ActualdictData[i].value,
                        backgroundColor: colors1[i],
                        borderColor: colors1[i],
                        borderWidth: 1,
                        barPercentage: 1.3,
                        // categoryPercentage: 1
                    });
                }

                var histoData = {
                    labels: Xaxisvalue,
                    datasets: datasset
                };
                var config = {
                    type: newType,
                    data: histoData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top',
                                align: 'center'
                            },
                            tooltips: {
                                enabled: true
                            }
                        },
                        scales: {
                            x: {
                                stacked: false
                            },
                            y: {
                                stacked: false,
                                display: true,
                                ticks: {
                                    beginAtZero: true,
                                    //callback: function (val, index) {
                                    //    return val / 100000;
                                    //}
                                }
                            }
                        }
                    }
                };

            }
            else if (newType.toLowerCase() == "candlestick") {

                var dateData = ["2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-07-01", "2020-08-01", "2020-09-01", "2020-10-01", "2020-11-01", "2020-12-01"];
                let arr = [];
                dateData.map((val, index) => {
                    let obj = {
                        x: luxon.DateTime.fromSQL(dateData[index])["ts"],
                        o: Openvalue[index],
                        h: Highvalue[index],
                        l: Lowvalue[index],
                        c: Closevalue[index]
                    };
                    arr.push(obj);
                });

                var config = {
                    type: newType,
                    data: {
                        datasets: [{
                            label: 'CHRT - Chart.js Corporation',
                            data: arr
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltips: {
                                enabled: true
                            }
                        }
                    }
                };
            }
            else if (newType.toLowerCase() == "gauge") {
                newType = 'doughnut';

                var randomValue = function (data) {
                    return Math.max.apply(null, data) * Math.random();
                };
                var value = randomValue(Hightvalue);

                var GaugeData;
                if (Xaxisvalue.length != 0) {
                    GaugeData = {
                        labels: Xaxisvalue,
                        datasets: [
                            {
                                label: hvl,
                                backgroundColor: ["lightblue", "lightgreen", "pink", "#FFD580", "#cb504d", "yellow", "orange", "purple", "violet", "blue", "green", "red"],
                                data: Hightvalue,
                                needleValue: value,
                                borderColor: 'Black',
                                borderWidth: 1,
                                //cutout: '90%',
                                circumference: 180,
                                rotation: 270
                            }
                        ]
                    };
                }
                //console.log("Gauge Data:", GaugeData);

                var gaugeNeedle = {
                    id: 'gaugeNeedle',
                    afterDatasetDraw(chart, args, options) {
                        var { ctx, config, data, chartArea: { top, bottom, left, right,
                            width, height } } = chart;
                        ctx.save();
                        //console.log("ctx:",ctx);
                        var needleValue = data.datasets[0].needleValue;
                        var dataTotal = data.datasets[0].data.reduce((a, b) => a + b, 0);
                        var angle = Math.PI + (1 / dataTotal * needleValue * Math.PI);
                        //console.log("angle:",angle);
                        var cx = width / 2;
                        var cy = (chart._metasets[0].data[0].y - 10);
                        //console.log("offsetTop:",ctx.canvas.offsetTop);
                        //console.log("cx:",cx);
                        //console.log("cy:",cy);

                        //needle
                        ctx.translate(cx, cy);
                        ctx.beginPath();
                        ctx.rotate(angle);
                        ctx.moveTo(0, -10);
                        ctx.lineTo(height - (ctx.canvas.offsetTop - 40), 10);
                        ctx.lineTo(0, 10);
                        ctx.fillStyle = '#444';
                        ctx.fill();
                        ctx.restore();

                        // needle dot
                        //ctx.translate(-cx,-cy);
                        ctx.beginPath();
                        ctx.arc(cx, cy, 5, 0, 10);
                        ctx.fill();
                        ctx.restore();

                        ctx.font = '20px black';
                        ctx.fillStyle = '#444';
                        ctx.fillText(needleValue + '%', cx + 20, cy - 90);
                        ctx.textAlign = 'center';
                        ctx.restore();
                    }
                }

                var config = {
                    type: newType,
                    data: GaugeData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: true,
                                callbacks: {
                                    label: function (context) {
                                        //return context['dataset']['label'] + ": " + context['dataset']['data'][context.dataIndex];
                                        return context.chart.data.labels[context.dataIndex] + ":" + context['dataset']['data'][context.dataIndex];
                                    }
                                }
                            }
                        }
                    },
                    plugins: [gaugeNeedle]
                };

            }

            var ctx = document.getElementById("myChart").getContext("2d");
            if (myChart) {
                myChart.destroy();
            }
            var temp = jQuery.extend(true, {}, config);
            temp.type = newType;
            myChart = new Chart(ctx, temp);
        }
    </script>

    <!-- CLICK EVENT FOR EDIT BUTTON -->
    <script>
        $('#BtnSubmitKpi_edit').click(function () {

               var isAllValid = true;
               var imagedata = $(this).attr('datatyp');//$('#container').find('.card-img-top').attr('alt');//$('#container').find('h4.card-title').html();
               var chart_id = $(this).attr('dataid');//$(' #myTabInner a.active').attr("data-id");
            var chart_id_type = $(' #myTabInner a.active').attr("data-type");




        if ($('#kpi_name').val().trim() == '') {
                   isAllValid = false;
                   $('#kpi_name').siblings('span.error').css('visibility', 'visible');
               }
               else {
                   $('#kpi_name').siblings('span.error').css('visibility', 'hidden');
               }
        var dictData = [];
               var id, trimid, name;
               var chartpara = "{";
               var arr = [];
               arr.push("{")
               var dta = "a";
               if (imagedata != "tabular" && imagedata != "label") {
                   $('.drag-style input[type=search]').each(function (i, item) {

                       var grade = $(item).val();
                       grade = "" + grade + "";

                       id = $(item).attr("id");    //trimid: XAxis,Heigth,Group,Color
                       trimgrade = grade.trim();
                       trimid = id.trim();
                       dictData.push({
                           key: id,
                           value: grade
                       });

                   });
                   for (let i = 0; i < dictData.length; i++) {

                   arr.push(dictData[i].key + ":" + dictData[i].value)
                   if (i < dictData.length - 1) {
                       dta = "\"" + dictData[i].value + "\"";
                       chartpara += "\"" + dictData[i].key + "\"" + ":" + dta + ","
                   }
                   else {
                       dta = "\"" + dictData[i].key + "\"";

                       chartpara += dta + ":" + "\"" + dictData[i].value + "\"";
                   }
               }
               chartpara+="}"
               arr.push("}")

               }

               else if (imagedata == "label") {
                   $('.drag-style input[type=search]').each(function (i, item) {

                       var grade = $(item).val();
                       grade = "" + grade + "";

                       id = $(item).attr("id");    //trimid: XAxis,Heigth,Group,Color
                       trimgrade = grade.trim();
                       trimid = id.trim();
                       dictData.push({
                           key: id,
                           value: grade
                       });

                   });


                   //for (let i = 0; i < dictData.length; i++) {
                   //    if (dictData[i].value != "" && dictData[i].key != "") {
                   //        chartpara += "\"" + dictData[i].key + "\"" + ":" + "  " + "\"" + dictData[i].value + "\"" ;
                   //    }
                   //}
                   var vale;
                   for (let i = 0; i < dictData.length; i++) {

                       if (i == 0) {
                           labels = dictData[i].value;
                           vale = dictData[i].value;
                           chartpara += "\"" + dictData[i].key + "\"" + ":" + "  " + "\"" + vale + "\""+",";

                       }
                       //else if (i == 1) {
                       //    captions = dictData[i].value;
                       //    if (captions == "") {
                       //        captions = labels;
                       //        vale = captions;
                       //    }
                       //    else {
                       //        captions = dictData[i].value;;
                       //        vale = captions;
                       //    }
                       //      chartpara += "\"" + dictData[i].key + "\"" + ":" + "  " + "\"" + vale + "\""+",";
                       //}



                   }
                   $('.drag-style select[name=drop_down_label]').each(function (i, item) {
                       id = $(item).attr("id");
                       selects = $(item).val();
                   });

                   chartpara += "\"" + id + "\"" + ":" + "  " + "\"" + selects + "\"" + ",";


                     for (let i = 0; i < dictData.length; i++) {

                       //if (i == 0) {
                       //    labels = dictData[i].value;
                       //    vale = dictData[i].value;
                       //    chartpara += "\"" + dictData[i].key + "\"" + ":" + "  " + "\"" + vale + "\""+",";

                       //}
                      if (i == 1) {
                           captions = dictData[i].value;
                           if (captions == "") {
                               captions = labels;
                               vale = captions;
                           }
                           else {
                               captions = dictData[i].value;;
                               vale = captions;
                           }
                             chartpara += "\"" + dictData[i].key + "\"" + ":" + "  " + "\"" + vale + "\""+",";
                       }



                   }
                   $('.drag-style input[type =text]').each(function (i, item) {
                       id = $(item).attr("id");
                       colors = $(item).val();
                   });
                   chartpara += "\"" + id + "\"" + ":" + "  " + "\"" + colors + "\"";
                   //chartpara += "\"" + id + "\"" + ":" + "  " + "\"" + colors + "\"";

                   chartpara += "}"

               }
               else if (imagedata == "tabular"){
                   $("#kpiFunctionData1 input.getdata").each(function () {
                       var row = $(this).closest('tr');
                       var columns = row.find('select.org').val();
                       var columns1 = row.find('.getdata').val();
                       dictData.push({
                           key: columns,
                           value: columns1
                       });

                   })

                   for (let i = 0; i < dictData.length; i++) {

                       arr.push(dictData[i].key + " :  " + "  " + dictData[i].value)
                       if (i < dictData.length - 1) {

                           dta = dictData[i].value;
                           if (dta != "") {
                               dta = "\"" + dictData[i].value + "\"";
                           }
                           else {
                               dta = "\"" + dictData[i].key + "\"";

                           }
                           chartpara += "\"" + dictData[i].key + "\"" + " :" + "  " + dta + ","
                       }
                       else {

                           dta = "\"" + dictData[i].key + "\"";
                           dtv = dictData[i].value;
                           if (dtv != "") {
                               dtv = "\"" + dictData[i].value + "\"";
                           }
                           else {
                               dtv = "\"" + dictData[i].key + "\"";

                           }
                           chartpara += dta + ":  " + "  " + dtv;
                       }
                   }

                   chartpara += "}"

               }

                if (isAllValid) {
                    var newDataVal = {
                        kpi_name: $("#kpi_name").val().trim(),
                        kpi_description: $('#kpi_description').val().trim(),
                        chart_id: chart_id,
                        kpi_chart_parameters: chartpara
                    }

                $.ajax({
                   type: 'POST',
                   url: '@Url.Content("~/Graph/kpiSave")',
                   data: JSON.stringify(newDataVal),
                   contentType: 'application/json',
                   success: function (data) {
                         if (data.startsWith("ERROR")) {
                             var res = data.split(";");
                             var error = '';
                             if (res.length > 1) {
                                 error = res[1];
                             } else {
                                 error = data;
                             }
                             alert(error);
                         } else {
                             alert('Data saved successfully!!!');
                             $('#myModal').modal('hide');
                             $('#myModal').modal('');
                             var dashboard_url = '@Url.Content("~/Graph/kpiview")';
                             window.location.href = dashboard_url;
                             //location.reload();
                         }
                   },
                   error: function (error) {
                       alert('Error');
                   }
               });
            }
        });
        $('#loadchart_edit').click(function () {
               var imagedata =  $(this).attr('data_typ');//$('#container').find('.card-img-top').attr('alt');

               //alert("Edit Mode CHart_loadchart", imagedata);
               //console.log("Edit Mode CHart_loadchart", imagedata);
               $('#container').hide();
               document.getElementById('chartDiv').style.display = "block";
               var model = @Html.Raw(Json.Encode(Model.json_tuple));

               var dictData = [];

                   var dta = "a";
                   var chartpara = "";
               if (imagedata != "tabular") {
                   var id, trimid, name;
                   $('.drag-style input[type=search]').each(function (i, item) {


                       var grade = $(item).val();
                       chartpara += grade;

                       id = $(item).attr("id");
                       name = $(item).attr("name");

                       trimgrade = grade.trim();
                       trimid = id.trim();
                       // alert(trimid);

                       var myObject = eval('(' + model + ')');

                       var grade = [];

                       if (trimgrade !== "" && trimid !== "") {
                           for (i in myObject) {
                               storedata = myObject[i][trimgrade]
                               grade.push(storedata);
                           }
                           dictData.push({
                               key: id,
                               value: grade
                           });
                       }

                   });

               }
              // alert(imagedata);

               $("#saviid").show();
               if (imagedata == "label") {
                   $("#myChart").hide();
                   $('#tabular_container').hide();
                   $('#labelgraph_container').show();

                   label_plot1();
               }
               else {
                   if (imagedata == "tabular") {
                       $("#myChart").hide();
                       $('#labelgraph_container').hide();
                       $('#tabular_container').show();
                       tabular1(dictData);
                   }
                   if (imagedata != "label" && imagedata != "tabular") {
                       $("#myChart").show();
                      $('#tabular_container').hide();
                      $('#labelgraph_container').hide();

                       DrowTheGraph(dictData, imagedata);
                   }
               }


               });
    </script>

    <!-- CLICK EVENT FOR TAB BUTTON -->
    <script>
        $(document).ready(function () {
            $(".tab-active").click(function () {
                $("#home-tab").removeClass("active");
                $("#profile-tab").addClass("active");
                // $(".tab").addClass("active"); // instead of this do the below

            });
            $(".tab-active1").click(function () {

                $("#profile-tab").removeClass("active");
                $("#profile-tab").removeClass("active");
                $("#contact-tab").addClass("active");
                // $(".tab").addClass("active"); // instead of this do the below

            });
            $("#profile-tab").click(function () {
                $("#home-tab").removeClass("active");
                // $("#profile-tab").removeClass("active");
                //$("#profile-tab").removeClass("active");
                $("#contact-tab").removeClass("active");
                $("#profile-tab").addClass("active");
                // $(".tab").addClass("active"); // instead of this do the below

            });
            $("#home-tab").click(function () {
                $("#profile-tab").removeClass("active");
                // $("#profile-tab").removeClass("active");
                //$("#profile-tab").removeClass("active");
                $("#contact-tab").removeClass("active");
                $("#home-tab").addClass("active");
                // $(".tab").addClass("active"); // instead of this do the below

            });
            $("#contact-tab").click(function () {
                $("#profile-tab").removeClass("active");
                // $("#profile-tab").removeClass("active");
                //$("#profile-tab").removeClass("active");
                $("#contact-tab").addClass("active");
            });
            $("#contact-tab").click(function () {
                $(".map_data").show();
                // $(".tab").addClass("active"); // instead of this do the below

            });
            $(".tab-active1").click(function () {
                $(".map_data").show();

            });
        });
    </script>

    <script type="text/javascript">
        $.fn.multiStepForm = function (args) {
            if (args === null || typeof args !== 'object' || $.isArray(args))
                throw " : Called with Invalid argument";
            var form = this;
            var tabs = form.find('.tab');
            var steps = form.find('.step');
            steps.each(function (i, e) {
                $(e).on('click', function (ev) { });
            });
            form.navigateTo = function (i) {
                /*index*/
                /*Mark the current section with the class 'current'*/
                tabs.removeClass('current').eq(i).addClass('current');
                steps.removeClass('active').eq(i).addClass('active');
                // var steps = form.find('.step');
                // Show only the navigation buttons that make sense for the current section:
                form.find('.previous').toggle(i > 0);
                atTheEnd = i >= tabs.length - 1;
                form.find('.next').toggle(!atTheEnd);

                form.find('.submit').toggle(atTheEnd);
                fixStepIndicator(curIndex());
                return form;
            }

            function curIndex() {
                /*Return the current index by looking at which section has the class 'current'*/
                return tabs.index(tabs.filter('.current'));
            }

            function fixStepIndicator(n) {
                steps.each(function (i, e) {
                    i == n ? $(e).addClass('active') : $(e).removeClass('active');
                });
            }
            /* Previous button is easy, just go back */
            form.find('.previous').click(function () {
                form.navigateTo(curIndex() - 1);
            });

            /* Next button goes forward iff current block validates */
            form.find('.next').click(function () {
                if ('validations' in args && typeof args.validations === 'object' && !$.isArray(args.validations)) {
                    if (!('noValidate' in args) || (typeof args.noValidate === 'boolean' && !args.noValidate)) {
                        form.validate(args.validations);
                        if (form.valid() == true) {
                            form.navigateTo(curIndex() + 1);
                            return true;
                        }
                        return false;
                    }
                }
                form.navigateTo(curIndex() + 1);
            });
            form.find('.submit').on('click', function (e) {
                if (typeof args.beforeSubmit !== 'undefined' && typeof args.beforeSubmit !== 'function')
                    args.beforeSubmit(form, this);
                /*check if args.submit is set false if not then form.submit is not gonna run, if not set then will run by default*/
                if (typeof args.submit === 'undefined' || (typeof args.submit === 'boolean' && args.submit)) {
                    form.submit();
                }
                return form;
            });
            /*By default navigate to the tab 0, if it is being set using defaultStep property*/
            typeof args.defaultStep === 'number' ? form.navigateTo(args.defaultStep) : null;

            form.noValidate = function () {

            }
            return form;
        };
        var myForm = $('#myTabC');
        myForm.multiStepForm({
            // defaultStep:0,
            callback: function () {
                // console.log("save");
            }
        });
        myForm.navigateTo(0);
        $('[data-nav]').each(function (i) {
            var thisButton = $(this);
            var ind = thisButton.data('nav') * 1;
            thisButton.on('click', function (e) {
                myForm.navigateTo(ind);
            });
        });
    </script>

</body>