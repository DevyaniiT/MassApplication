@model MassApplication.Models.Scheduler_Class
@using Npgsql;
@using System.Configuration;
@using System.Data;
@using System.Text.RegularExpressions;
@using MassApplication.ClassFolder;
@using Newtonsoft.Json;

<style>
    .text-danger {
        color: #a94442;
    }

    #daily, #monthly, #weekly, #onetime, #minutes {
        display: none;
    }

    .cust-lable {
        float: left !important;
        margin-top: 7px !important;
    }

    .form-controll {
        width: 100%;
        height: 34px;
        font-size: 13px !important;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        border: 1px solid #ccc !important;
        border-radius: 4px;
        box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
        font-family: Roboto, Arial, sans-serif !important;
    }

    #tabSchedularEdit .nav-link {
        color: #000;
        background-color: #e1e1e1;
        border: 0;
        margin: 0 4px;
        padding: 13px 23px;
        font-size: 13px;
        border-radius: 5px;
        text-transform: uppercase;
        font-weight: 600;
    }

        #tabSchedularEdit .nav-link.active, .nav-tabs .nav-item.show .nav-link {
            color: #ffffff;
            background-color: #2a5b6c;
            border: 0;
            padding: 13px 23px;
            margin: 0 4px;
            border-radius: 5px;
            text-transform: uppercase;
            font-size: 13px;
            font-weight: 600;
        }
</style>

<link href="~/MasterStyles/summernote/summernote-bs4.css" rel="stylesheet" />
<link href="~/MasterStyles/css/Bootstrap.css" rel="stylesheet" />
<link href="~/MasterStyles/Bootstrap-datetimepicker/bootstrap-datetimepicker.min.css" rel="stylesheet" />

<div class="form-horizontal">
    <ul class="newnavconn nav nav-tabs border-bottom-0" id="tabSchedularEdit">
        <li class="nav-item"><a href="#scheduleEditTab" class="nav-link active" data-toggle="tab">Schedule</a></li>
        <li class="nav-item"><a href="#emailEditTab" class="nav-link" data-toggle="tab">Email</a></li>
        <li class="nav-item"><a href="#paramEditTab" class="nav-link" data-toggle="tab">Parameters</a></li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active mt-4" id="scheduleEditTab">
            <div class="schedularDetail">
                @Html.HiddenFor(model => model.job_id, new { id = "edit_job_id" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group row">
                            <div class="col-sm-4">
                                <label class="col-form-label" style="font-weight:500; font-size:14px">Job name:</label>
                                <strong class="text-danger ng-star-inserted">*</strong>
                            </div>
                            <div class="col-sm-8">
                                <input id="edit_job_name" type="text" class="form-control" placeholder="Enter job name" value="@Model.job_name">
                            </div>

                        </div>
                        <div class="form-group row">
                            <div class="col-sm-4">
                                <label class="col-form-label" style="font-weight:500; font-size:14px">Start On:</label>
                                <strong class="text-danger ng-star-inserted">*</strong>
                            </div>
                            <div class="col-sm-8">
                                <div class='input-group date' id='EditStartDatetimepicker'>
                                    <input id="edit_job_StartDate" type='text' class="form-control" placeholder="YYYY-MM-DD --:-- --" onkeydown="return false" value="@Model.schedule_start_date" />
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @*<input id="edit_job_StartDate" type="datetime-local" class="form-control" placeholder="YYYY-MM-DD" value="@Model.schedule_start_date">*@
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-4">
                                <label class="col-form-label" style="font-weight:500; font-size:14px">Frequency:</label>
                                <strong class="text-danger ng-star-inserted">*</strong>
                            </div>
                            <div class="col-sm-8">
                                @Html.DropDownList("EditScheduleDuration", new SelectList(ViewBag.ScheduleDuration, "Value", "Text", Model.duration.ToUpper()), new { @class = "form-control", id = "EditScheduleDuration" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <label class="col-sm-4 col-form-label" style="font-weight:500; font-size:14px">Job description:</label>
                            <div class="col-sm-8">
                                <textarea id="edit_job_description" class="form-control" placeholder="Enter description" rows="6" style="resize:none">@Model.job_description</textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-2">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> Recurrence: </label>
                        <strong class="text-danger ng-star-inserted">*</strong>
                    </div>

                    <div id="daily">
                        <div class="ml-2">
                            <input type="number" class="form-controll numberData" id="EditDailyNumberData" style="width: 30% !important;" />
                            <span class="ml-2">Days</span>
                        </div>
                    </div>
                    <div class="col-md-8" id="weekly">
                        <div class="ml-2">
                            <input type="number" class="form-controll" id="EditWeeklyNumberData" style="width: 10% !important;" />
                            <span class="ml-2">Weeks</span>
                            @{
                                List<SelectListItem> week_items = new List<SelectListItem>();
                                var weekList = new List<SelectListItem>();
                                foreach (var i in ViewBag.WeekItems)
                                {
                                    weekList.Add(new SelectListItem { Value = i.Value.ToString(), Text = i.Text.ToString() });
                                }
                                week_items = weekList;
                            }
                            <div class="form-check form-check-inline mt-2" id="EditSelectiveWeeksDays">
                                @for (var i = 0; i < week_items.Count(); i++)
                                {
                                    var checkid = "check" + i;
                                    @*<label class="form-check-label" for="@checkid">
                                            <input class="form-check-input" type="checkbox" value="@week_items[i].Value">@week_items[i].Text
                                        </label>*@

                                    <label class="checkbox-inline mr-2" for="@checkid">
                                        <input class="mr-1" type="checkbox" value="@week_items[i].Value">@week_items[i].Text
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                    <div id="monthly">
                        <div class="ml-2">
                            <input type="number" class="form-controll" id="EditMonthlyNumberData" style="width: 20% !important;" />
                            <span class="ml-2">Months</span>
                            <select id="EditDaySelectList" class="form-controll ml-3" style="width: 25% !important;">
                                <option value="0">SELECT</option>
                                @foreach (var item in ViewBag.DayItems)
                                {
                                    <option value="@item.ToString()">@item.ToString()</option>
                                }
                            </select>
                            <span class="ml-2">Days</span>
                        </div>
                    </div>

                    @*<div style="padding-left: 5px;">
                            <label ID="Label10" class="control-label"> Active </label>
                            @{
                                if (Model.schedule_status == "0")
                                {
                                    <label class="switch mt-2">
                                        <input class="edit_schedular_active_mode" type="checkbox" checked="checked" data-id="@Model.job_id" name="edit_schedular_active_mode">
                                        <span class="slider round"></span>
                                    </label>

                                }
                                else
                                {
                                    <label class="switch mt-2">
                                        <input class="edit_schedular_active_mode" type="checkbox" data-id="@Model.job_id" name="edit_schedular_active_mode">
                                        <span class="slider round"></span>
                                    </label>
                                }
                            }
                        </div>*@

                </div>
                <div class="form-group row">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-sm-4">
                                <label class="col-form-label" style="font-weight:500; font-size:14px"> Active: </label>
                            </div>
                            <div class="col-sm-8">
                                @{
                                    if (Model.schedule_status == "0")
                                    {
                                        <label class="switch mt-2">
                                            <input class="edit_schedular_active_mode" type="checkbox" checked="checked" data-id="@Model.job_id" name="edit_schedular_active_mode">
                                            <span class="slider round"></span>
                                        </label>
                                    }
                                    else
                                    {
                                        <label class="switch mt-2">
                                            <input class="edit_schedular_active_mode" type="checkbox" data-id="@Model.job_id" name="edit_schedular_active_mode">
                                            <span class="slider round"></span>
                                        </label>
                                    }
                                }
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane mt-4" id="emailEditTab">
            <div class="emailDetail">
                @Html.HiddenFor(model => model.email_id, new { id = "edit_email_id" })
                <div class="form-group row">
                    <div class="col-sm-3">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> To: </label>
                        <strong class="text-danger ng-star-inserted">*</strong>
                    </div>
                    <div class="col-sm-9">
                        <input type="email" class="form-control" id="edit_mail_to" name="edit_mail_to" placeholder="Enter email" value="@Model.to_email" style="resize:none">
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> CC: </label>
                    </div>
                    <div class="col-sm-9">
                        <input type="email" class="form-control" id="edit_mail_cc" name="edit_mail_cc" placeholder="Enter cc" value="@Model.cc_email">
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> BCC: </label>
                    </div>
                    <div class="col-sm-9">
                        <input type="email" class="form-control" id="edit_mail_bcc" name="edit_mail_bcc" placeholder="Enter bcc" value="@Model.bcc_email">
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> Subject: </label>
                    </div>
                    <div class="col-sm-9">
                        <textarea id="edit_mail_sub" name="edit_mail_sub" class="form-control" placeholder="Enter subject">@Model.sub_email</textarea>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <label class="col-form-label" style="font-weight:500; font-size:14px"> Body: </label>
                    </div>
                    <div class="col-sm-9">
                        <textarea id="edit_mail_body">@Model.body_email</textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane mt-4" id="paramEditTab">
            <div class="form-group row paramDetail">
                @Html.HiddenFor(model => model.job_report_id, new { id = "edit_report_id" })
                @if (ViewBag.ParameterItems != null)
                {
                    foreach (var m in ViewBag.ParameterItems)      //contains var variables in parameters_class
                    {
                        <div class="col-md-6">
                            <div class="form-group row">
                                <div class="col-sm-4">
                                    <label class="col-form-label labelClass" style="font-weight:500; font-size:14px" data-val="@m.param_variable"> @m.param_label </label>
                                    <strong class="text-danger ng-star-inserted">*</strong>
                                </div>
                                <div class="col-sm-8">
                                    @{
                                        List<SelectListItem> items = new List<SelectListItem>();
                                        string param_data_value = m.param_data_values;
                                        string method_val = m.param_method;
                                        string query_val = m.param_query;
                                        string variable_val = m.param_variable.ToLower();
                                        string SwitchCase_type = m.param_type;
                                        string constr = ConfigurationManager.ConnectionStrings["DatabaseServer"].ConnectionString;
                                        string function_script = "";
                                        string region = MassApplication.ClassFolder.Login_Class.region_id;
                                        switch (SwitchCase_type.ToLower())
                                        {
                                            case "dropdown":
                                                if (method_val.ToLower() == "static")
                                                {
                                                    DataTable dt = new DataTable();
                                                    dt = (DataTable)JsonConvert.DeserializeObject(query_val, (typeof(DataTable)));
                                                    int s = dt.Rows.Count;
                                                    for (int i = 0; i < s; i++)
                                                    {
                                                        string d1 = dt.Rows[i]["Text"].ToString();
                                                        string d2 = dt.Rows[i]["Value"].ToString();
                                                        items.Add(new SelectListItem { Text = d1, Value = d2 });
                                                    }
                                                    ViewBag.EditVariableData = items;
                                                    @Html.DropDownList("paramsdata", new SelectList(ViewBag.EditVariableData, "Text", "Value", param_data_value), new { @class = "form-control drop_down_daily" })
                                                }
                                                else
                                                {
                                                    if (variable_val.ToLower() == "varpipelinemst_id")
                                                    {
                                                        ViewBag.ActualData = "";
                                                        string function_str = (query_val);
                                                        string sPattern, Correctval;
                                                        Regex regex = new Regex(@"\[var([a-zA-Z0-9_\.\-]+)\]");
                                                        MatchCollection matchCollection = regex.Matches(query_val);
                                                        foreach (Match match in matchCollection)
                                                        {
                                                            string longid = match.ToString();
                                                            string input = region;

                                                            sPattern = match.Value.Replace("[", "\\[");
                                                            sPattern = sPattern.Replace("]", "\\]");

                                                            Correctval = input;
                                                            function_str = Regex.Replace(function_str, sPattern, Correctval);

                                                            function_script = function_str;
                                                        }

                                                        MASSODBC.MASSODBC obj = new MASSODBC.MASSODBC();
                                                        obj.DatabaseName = CrystalConnection_Class.database;
                                                        obj.OdbcName = CrystalConnection_Class.odbc_name;
                                                        obj.UserId = CrystalConnection_Class.user;
                                                        obj.Password = CrystalConnection_Class.password;
                                                        DataTable dt = new DataTable();
                                                        dt = obj.OpenTable(function_script, "query");

                                                        foreach (DataRow dr in dt.Rows)
                                                        {
                                                            items.Add(new SelectListItem
                                                            {
                                                                Text = dr["id"].ToString(),
                                                                Value = dr["value"].ToString()
                                                            });
                                                        }
                                                        dt.Dispose();

                                                        ViewBag.EditNetworkData = items;
                                                        @Html.DropDownList("NetworkList", new SelectList(ViewBag.EditNetworkData, "Text", "Value"), "--SELECT--", new { @class = "form-control drop_down_daily", id = "NetworkList" })
                                                    }
                                                    else { }
                                                }
                                                break;
                                            case "dropdown-multi":
                                                if (variable_val == "varpipelinemst_id")
                                                {
                                                    string function_str = (query_val);
                                                    string sPattern, Correctval;
                                                    Regex regex = new Regex(@"\[var([a-zA-Z0-9_\.\-]+)\]");
                                                    MatchCollection matchCollection = regex.Matches(query_val);
                                                    foreach (Match match in matchCollection)
                                                    {
                                                        string longid = match.ToString();
                                                        string input = region;

                                                        sPattern = match.Value.Replace("[", "\\[");
                                                        sPattern = sPattern.Replace("]", "\\]");

                                                        Correctval = input;
                                                        function_str = Regex.Replace(function_str, sPattern, Correctval);

                                                        function_script = function_str;
                                                    }

                                                    MASSODBC.MASSODBC obj = new MASSODBC.MASSODBC();
                                                    obj.DatabaseName = CrystalConnection_Class.database;
                                                    obj.OdbcName = CrystalConnection_Class.odbc_name;
                                                    obj.UserId = CrystalConnection_Class.user;
                                                    obj.Password = CrystalConnection_Class.password;
                                                    DataTable dt = new DataTable();
                                                    dt = obj.OpenTable(function_script, "query");

                                                    foreach (DataRow dr in dt.Rows)
                                                    {
                                                        items.Add(new SelectListItem
                                                        {
                                                            Text = dr["id"].ToString(),
                                                            Value = dr["value"].ToString()
                                                        });
                                                    }
                                                    dt.Dispose();

                                                    ViewBag.NetworkDDData = items;
                                                    <div id="network_selection" class="mt-2">
                                                        @if (param_data_value.ToLower() == "all")
                                                        {
                                                            <label style="font-weight:500; font-size:14px">
                                                                @Html.RadioButton("network_selection_daily", "All", true)
                                                                All
                                                            </label>
                                                            <label style="font-weight:500; font-size:14px">
                                                                @Html.RadioButton("network_selection_daily", "Selective_network", false, new { id = "pipeselection" })
                                                                Selective
                                                            </label>
                                                        }
                                                        else
                                                        {
                                                            <label style="font-weight:500; font-size:14px">
                                                                @Html.RadioButton("network_selection_daily", "All", false)
                                                                All
                                                            </label>
                                                            <label style="font-weight:500; font-size:14px">
                                                                @Html.RadioButton("network_selection_daily", "Selective_network", true, new { id = "pipeselection" })
                                                                Selective
                                                            </label>
                                                        }

                                                    </div>
                                                    <div id="Selective_network" class="check_container check_container_box">
                                                        <table id="tblNetworks">
                                                            @for (var i = 0; i < items.Count(); i++)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        @Html.CheckBoxFor(it => items[i].Selected, new { @class = "Check_list", value = items[i].Text })
                                                                        <label data-val="@items[i].Text">@Html.DisplayFor(it => items[i].Value)</label>
                                                                        @Html.HiddenFor(it => items[i].Value)
                                                                        @Html.HiddenFor(it => items[i].Text)
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </table>
                                                    </div>
                                                }
                                                else if (variable_val.ToLower() == "varsection_id")
                                                {
                                                    MassApplication.ClassFolder.RptParams_Class.query_val = m.param_query;
                                                    <div id="partialSectionDiv">
                                                        @Html.Partial("~/Views/Shared/_partialDropdwnSectionData.cshtml")
                                                    </div>
                                                }
                                                break;
                                            case "datetime":
                                                var dateTiming = "";
                                                if (param_data_value.ToLower() != "today" && param_data_value.ToLower() != "yesterday" && param_data_value.ToLower() != "thismonth" && param_data_value.ToLower() != "previousmonth" && param_data_value.ToLower() != "thisweek" && param_data_value.ToLower() != "previousweek")
                                                {
                                                    dateTiming = param_data_value;
                                                    param_data_value = "CUSTOM";
                                                }
                                                @Html.DropDownList("paramsdata", new SelectList(ViewBag.DateDuration, "Value", "Text", param_data_value), new { @class = "form-control EditDatetimeDropDwn", id = m.param_variable })

                                                var newDivname = "CUSTOM" + m.param_variable;

                                                <div id="@newDivname">
                                                    <input class="form-control dataDateRange" type="date" name="paramsdata" placeholder="YYYY-MM-DD" value="@dateTiming" />
                                                </div>

                                                break;
                                            default:
                                                <input class="form-control drop_down_daily" type="text" name="paramsdata" />
                                                break;
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div style="padding:10px 0; text-align:right">
        <input id="BtnEditSchedularDetail" type="button" value="Save" class="btn btn-dash" style="padding:10px 20px" />
        <input type="button" value="Close" class="btn btn-default" data-dismiss="modal" style="padding: 10px 20px; background-color: #e1e1e1; color: #000;" />
    </div>
</div>

<script src="~/MasterStyles/summernote/summernote-bs4.js"></script>
<script src="~/MasterStyles/Bootstrap-datetimepicker/bootstrap-datetimepicker.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>

<script>
    $(document).ready(function () {
        $('textarea#edit_mail_body').summernote({
            placeholder: 'Hello',
            tabsize: 2,
            height: 150,
            disableResizeEditor: true,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'italic', 'underline', 'clear']],
                // ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],
                //['fontname', ['fontname']],
                // ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['height', ['height']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'hr']],
                //['view', ['fullscreen', 'codeview']],
                ['help', ['help']]
            ],
        });
        var DurationSelectedVal = "";
        DurationSelectedVal = $('#EditScheduleDuration').find(':selected').val();
        //console.log("DurationSelectedVal:", DurationSelectedVal);
        $('#' + DurationSelectedVal).show();

        var recurrenceDays = @Html.Raw(Json.Encode(Model.recurrenceItems));
        var frequencyDays = @Html.Raw(Json.Encode(Model.frequencyDays));
        var jobReportArguments = @Html.Raw(Json.Encode(Model.job_report_arguments));
        var argumentsArray = eval('(' + jobReportArguments + ')');
        //console.log("argumentsArray:", argumentsArray);

        var reportLabels = argumentsArray["report_labels"];
        var reportParameters = '@ViewBag.ReportParams';

        if (DurationSelectedVal.toLowerCase() == "daily") {
            $('#EditDailyNumberData').val(recurrenceDays);
        }
        else if (DurationSelectedVal.toLowerCase() == "weekly") {
            $('#EditWeeklyNumberData').val(recurrenceDays);
            const frequencyVariables = frequencyDays.split(',')
                .map((tag) => tag.trim())
                .filter((tag) => tag.length !== 0);
            console.log("frequencyVariables:", frequencyVariables);

            $.each(frequencyVariables, function (i, val) {
                $("input[value='" + val + "']").prop('checked', true);
            });
        }
        else if (DurationSelectedVal.toLowerCase() == "monthly") {
            $('#EditMonthlyNumberData').val(recurrenceDays);
            $("#EditDaySelectList").val(frequencyDays);
        }

        //console.log("reportParameters:", reportParameters);
        //console.log("reportLabels:", reportLabels);

        if (reportLabels != "" && reportParameters != "" && reportLabels != null && reportParameters != null)
        {
            const labelsArray = reportLabels.split(',')
                .map((tag) => tag.trim())
                .filter((tag) => tag.length !== 0);
            const paramsArray = reportParameters.split(',')
                .map((tag) => tag.trim())
                .filter((tag) => tag.length !== 0);
            console.log("labelsArray:", labelsArray);
            console.log("paramsArray:", paramsArray);

            var actualparametersArray = [];
            for (var i = 0; i < labelsArray.length; i++) {
                actualparametersArray.push({
                    key: labelsArray[i],
                    value: paramsArray[i]
                });
            }
            console.log("actualparametersArray:", actualparametersArray);

            const pipelineItems = actualparametersArray.find(item => item.key === "varPipelinemst_id");
            const pipelineResult = pipelineItems['value'];
            console.log("pipelineResult:", pipelineResult);
            if (pipelineResult.toLowerCase() == "all") {
                $('#Selective_network').css('display', 'none');
            }
            else {
                $('#Selective_network').css('display', 'block');
                const pipelineVariables = pipelineResult.split(';')
                    .map((tag) => tag.trim())
                    .filter((tag) => tag.length !== 0);
                console.log("pipelineVariables:", pipelineVariables);
                $.each(pipelineVariables, function (i, val) {
                    $("#Selective_network input.Check_list[value='" + val + "']").prop('checked', true);
                });
            }
        }

        $("#EditScheduleDuration").change(function () {
            var selectedVal = $(this).find(':selected').val();
            console.log("selectedVal", selectedVal);
            if (selectedVal === "daily") {
                $("#daily").show();
                $("#weekly").hide();
                $("#monthly").hide();
                $("#none").hide();
            }
            else if (selectedVal === "weekly") {
                $("#weekly").show();
                $("#daily").hide();
                $("#monthly").hide();
                $("#none").hide();
            }
            else if (selectedVal === "monthly") {
                $("#monthly").show();
                $("#daily").hide();
                $("#weekly").hide();
                $("#none").hide();
            }
            else {
                $("#none").show();
                $("#daily").hide();
                $("#monthly").hide();
                $("#weekly").hide();
            }
        });
        $('.EditDatetimeDropDwn').each(function (i, item) {
            var getdropdownId = $(this).attr('id');
            var selectedVal = $(this).find(':selected').val();
            console.log("selectedVal", selectedVal);
            if (selectedVal === "CUSTOM") {
                $('#CUSTOM' + getdropdownId).show();
            }
            else {
                $('#CUSTOM' + getdropdownId).hide();
            }
            $('.EditDatetimeDropDwn').change(function () {
                getdropdownId = $(this).attr('id');
                var selectedVal = $(this).find(':selected').val();
                if (selectedVal === "CUSTOM") {
                    //console.log("selectedVal", selectedVal);
                    $('#CUSTOM' + getdropdownId).show();
                }
                else {
                    $('#CUSTOM' + getdropdownId).hide();
                }
            });

        });
        $("#EditStartDatetimepicker").on("dp.show", function (e) {
            $('.OK').html("Set");
        });
    });
    $('#BtnEditSchedularDetail').click(function () {
        var isAllValid = true;

        if ($('#edit_job_name').val().trim() == '') {
            isAllValid = false;
        }
        if ($('#edit_job_StartDate').val() == "0" || $('#job_StartDate').val() == "") {
            isAllValid = false;
        }
        if ($('#EditScheduleDuration').val() == "0" || $('#EditScheduleDuration').val() == "") {
            isAllValid = false;
        }
        if ($('#edit_mail_to').val().trim() == '') {
            isAllValid = false;
        }

        var jobFrequency = $('#EditScheduleDuration').val();
        var recurrenceData = "";
        var frequencyData = "";
        var periodId = 0;
        switch (jobFrequency) {
            case "daily":
                periodId = 2;
                recurrenceData = $('#EditDailyNumberData').val();
                frequencyData = "";
                break;
            case "weekly":
                periodId = 3;
                recurrenceData = $('#EditWeeklyNumberData').val();
                var checked_checkboxes = $("#EditSelectiveWeeksDays input:checked");
                var message = "";
                checked_checkboxes.each(function () {
                    var value = $(this).val();
                    message += value + ",";
                });
                message = message.slice(0, -1); // remove last comma string
                frequencyData = message;
                break;
            case "monthly":
                periodId = 4;
                recurrenceData = $('#EditMonthlyNumberData').val();
                frequencyData = $('#EditDaySelectList').val();
                break;
        }

        var labeldata = "";
        var paramsdata = "";
        var paramdateVal = [];
        var dateVal = [];
        var selectNetworkData = "";
        var selectSectionData = "";

        $("label.labelClass").each(function () {
            var value = $(this).attr('data-val');
            labeldata += value + ",";
        });
        labeldata = labeldata.slice(0, -1); // remove last comma string
        //console.log("labeldata:", labeldata);

        $(".drop_down_daily").each(function () {
            var value = $(this).val();
            paramsdata += value + ",";
        });
        paramsdata = paramsdata.slice(0, -1); // remove last comma string
        if (paramsdata != "") {
            paramsdata = paramsdata + ",[FROMDATE],[TODATE]";
        }
        //console.log("paramsdata:", paramsdata);

        $(".EditDatetimeDropDwn").each(function () {
            var value = $(this).val();
            paramdateVal.push(value);
        });
        //console.log("paramdateVal:", paramdateVal);

        $(".dataDateRange").each(function () {
            var value = $(this).val();
            dateVal.push(value);
        });
       //console.log("dateVal:", dateVal);

        for (var i = 0; i < dateVal.length; i++) {
            paramdateVal[i] = paramdateVal[i].replace("CUSTOM", dateVal[i]);
        }
        //console.log("NEW paramdateVal:", paramdateVal);

        $("#tblNetworks input[type=checkbox]:checked").each(function () {
            var value = $(this).closest("td").find("label").attr('data-val');
            //var value = $(this).closest("td").find("label").html();
            selectNetworkData += value + ",";
        });
        selectNetworkData = selectNetworkData.slice(0, -1); // remove last comma string
        //console.log("selectNetworkData:", selectNetworkData);

        $("#tblSections input[type=checkbox]:checked").each(function () {
            var value = $(this).closest("td").find("label").attr('data-val');
            selectSectionData += value + ",";
        });
        selectSectionData = selectSectionData.slice(0, -1); // remove last comma string
        //console.log("selectSectionData:", selectSectionData);

        if (isAllValid) {
            var data = {
                job_id: $('#edit_job_id').val(),
                email_id: $('#edit_email_id').val(),
                job_report_id: $('#edit_report_id').val(),
                job_name: $('#edit_job_name').val().trim(),
                job_description: $('#edit_job_description').val(),
                schedule_start_date: $('#edit_job_StartDate').val(),
                duration: jobFrequency,
                period_id: periodId,
                recurrenceItems: recurrenceData,
                frequencyDays: frequencyData,
                to_email: $('#edit_mail_to').val().trim(),
                cc_email: $('#edit_mail_cc').val().trim(),
                bcc_email: $('#edit_mail_bcc').val().trim(),
                sub_email: $('#edit_mail_sub').val().trim(),
                body_email: $('#edit_mail_body').summernote('code'),
                schedule_status: $('input[name="edit_schedular_active_mode"]').is(':checked'),
                param_network_selection: $("input:radio[name='network_selection_daily']:checked").val(),
                param_section_selection: $("input:radio[name='section_selection_daily']:checked").val(),
                param_label: labeldata,
                param_variable: paramsdata,
                job_dateData: paramdateVal,
                param_networks: $('#NetworkList').val(),
                param_network_variable: selectNetworkData,
                param_section_variable: selectSectionData
            }
            console.log("data:", data);

            $.ajax({
                type: 'POST',
                url: '@Url.Content("~/Report/EditSchedularSubmitData")',
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (data) {
                    if (data.startsWith("ERROR")) {
                        var res = data.split(";");
                        var error = '';
                        if (res.length > 1) {
                            error = res[1];
                        }
                        else {
                            error = data;
                        }
                        //alert(error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error
                        });
                    }
                    else {
                        var url = '@Url.Content("~/Dynamic/Index?menu_name=Schedule Task")';
                        Swal.fire({
                            icon: 'success',
                            title: 'Data updated successfully!!!',
                            showConfirmButton: true,
                        }).then(function () {
                            window.location.href = url;
                        });
                    }
                },
                error: function () {
                    //alert("Error");
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!'
                    });
                }
            });
        }
        else {
            //Swal.fire('Please fill the mandatory fields!!!');
            swal.fire({
                title: "Operation warning!",
                text: "Please fill the mandatory fields!",
                icon: "warning",
                button: "Ok",
            });
        }

    });
</script>
<script>
    $(function () {
        $("#EditStartDatetimepicker").datetimepicker({
            format: 'YYYY/MM/DD HH:mm:00',
            stepping: 5,
            showClose: true,
            icons: {
                close: 'OK'
            }
        })
    });
</script>

